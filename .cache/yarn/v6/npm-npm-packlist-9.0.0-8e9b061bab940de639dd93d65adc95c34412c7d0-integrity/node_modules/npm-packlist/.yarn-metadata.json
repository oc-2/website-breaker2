{
  "manifest": {
    "name": "npm-packlist",
    "version": "9.0.0",
    "description": "Get a list of the files to add from a folder into an npm package",
    "main": "lib/index.js",
    "dependencies": {
      "ignore-walk": "^7.0.0"
    },
    "author": {
      "name": "GitHub Inc."
    },
    "license": "ISC",
    "files": [
      "bin/",
      "lib/"
    ],
    "devDependencies": {
      "@npmcli/arborist": "^7.5.4",
      "@npmcli/eslint-config": "^4.0.0",
      "@npmcli/template-oss": "4.23.3",
      "mutate-fs": "^2.1.1",
      "tap": "^16.0.1"
    },
    "scripts": {
      "test": "tap",
      "posttest": "npm run lint",
      "snap": "tap",
      "postsnap": "npm run lintfix --",
      "eslint": "eslint \"**/*.{js,cjs,ts,mjs,jsx,tsx}\"",
      "lint": "npm run eslint",
      "lintfix": "npm run eslint -- --fix",
      "npmclilint": "npmcli-lint",
      "postlint": "template-oss-check",
      "template-oss-apply": "template-oss-apply --force"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/npm/npm-packlist.git"
    },
    "tap": {
      "test-env": [
        "LC_ALL=sk"
      ],
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ],
      "files": [
        "test/*.js"
      ]
    },
    "engines": {
      "node": "^18.17.0 || >=20.5.0"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "version": "4.23.3",
      "publish": true
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-npm-packlist-9.0.0-8e9b061bab940de639dd93d65adc95c34412c7d0-integrity/node_modules/npm-packlist/package.json",
    "readmeFilename": "README.md",
    "readme": "# npm-packlist\n\nGet a list of the files to add from a folder into an npm package.\n\nThese can be handed to [tar](http://npm.im/tar) like so to make an npm\npackage tarball:\n\n```js\nconst Arborist = require('@npmcli/arborist')\nconst packlist = require('npm-packlist')\nconst tar = require('tar')\nconst packageDir = '/path/to/package'\nconst packageTarball = '/path/to/package.tgz'\n\nconst arborist = new Arborist({ path: packageDir })\narborist.loadActual().then((tree) => {\n  packlist(tree)\n    .then(files => tar.create({\n      prefix: 'package/',\n      cwd: packageDir,\n      file: packageTarball,\n      gzip: true\n    }, files))\n    .then(_ => {\n      // tarball has been created, continue with your day\n    })\n  })\n```\n\nThis uses the following rules:\n\n1. If a `package.json` file is found, and it has a `files` list,\n   then ignore everything that isn't in `files`.  Always include the root\n   readme, license, licence and copying files, if they exist, as well\n   as the package.json file itself. Non-root readme, license, licence and\n   copying files are included by default, but can be excluded using the \n   `files` list e.g. `\"!readme\"`.\n2. If there's no `package.json` file (or it has no `files` list), and\n   there is a `.npmignore` file, then ignore all the files in the\n   `.npmignore` file.\n3. If there's no `package.json` with a `files` list, and there's no\n   `.npmignore` file, but there is a `.gitignore` file, then ignore\n   all the files in the `.gitignore` file.\n4. Everything in the root `node_modules` is ignored, unless it's a\n   bundled dependency.  If it IS a bundled dependency, and it's a\n   symbolic link, then the target of the link is included, not the\n   symlink itself.\n4. Unless they're explicitly included (by being in a `files` list, or\n   a `!negated` rule in a relevant `.npmignore` or `.gitignore`),\n   always ignore certain common cruft files:\n\n    1. .npmignore and .gitignore files (their effect is in the package\n       already, there's no need to include them in the package)\n    2. editor junk like `.*.swp`, `._*` and `.*.orig` files\n    3. `.npmrc` files (these may contain private configs)\n    4. The `node_modules/.bin` folder\n    5. Waf and gyp cruft like `/build/config.gypi` and `.lock-wscript`\n    6. Darwin's `.DS_Store` files because wtf are those even\n    7. `npm-debug.log` files at the root of a project\n\n    You can explicitly re-include any of these with a `files` list in\n    `package.json` or a negated ignore file rule.\n\nOnly the `package.json` file in the very root of the project is ever\ninspected for a `files` list.  Below the top level of the root package,\n`package.json` is treated as just another file, and no package-specific\nsemantics are applied.\n\n### Interaction between `package.json` and `.npmignore` rules\n\nIn previous versions of this library, the `files` list in `package.json`\nwas used as an initial filter to drive further tree walking. That is no\nlonger the case as of version 6.0.0.\n\nIf you have a `package.json` file with a `files` array within, any top\nlevel `.npmignore` and `.gitignore` files *will be ignored*.\n\nIf a _directory_ is listed in `files`, then any rules in nested `.npmignore` files within that directory will be honored.\n\nFor example, with this package.json:\n\n```json\n{\n  \"files\": [ \"dir\" ]\n}\n```\n\na `.npmignore` file at `dir/.npmignore` (and any subsequent\nsub-directories) will be honored.  However, a `.npmignore` at the root\nlevel will be skipped.\n\nAdditionally, with this package.json:\n\n```\n{\n  \"files\": [\"dir/subdir\"]\n}\n```\n\na `.npmignore` file at `dir/.npmignore` will be honored, as well as `dir/subdir/.npmignore`.\n\nAny specific file matched by an exact filename in the package.json `files` list will be included, and cannot be excluded, by any `.npmignore` files.\n\n## API\n\nSame API as [ignore-walk](http://npm.im/ignore-walk), except providing a `tree` is required and there are hard-coded file list and rule sets.\n\nThe `Walker` class requires an [arborist](https://github.com/npm/cli/tree/latest/workspaces/arborist) tree, and if any bundled dependencies are found will include them as well as their own dependencies in the resulting file set.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/npm-packlist/-/npm-packlist-9.0.0.tgz#8e9b061bab940de639dd93d65adc95c34412c7d0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/npm-packlist/-/npm-packlist-9.0.0.tgz",
    "hash": "8e9b061bab940de639dd93d65adc95c34412c7d0",
    "integrity": "sha512-8qSayfmHJQTx3nJWYbbUmflpyarbLMBc6LCAjYsiGtXxDB68HaZpb8re6zeaLGxZzDuMdhsg70jryJe+RrItVQ==",
    "registry": "npm",
    "packageName": "npm-packlist",
    "cacheIntegrity": "sha512-8qSayfmHJQTx3nJWYbbUmflpyarbLMBc6LCAjYsiGtXxDB68HaZpb8re6zeaLGxZzDuMdhsg70jryJe+RrItVQ== sha1-jpsGG6uUDeY53ZPWWtyVw0QSx9A="
  },
  "registry": "npm",
  "hash": "8e9b061bab940de639dd93d65adc95c34412c7d0"
}