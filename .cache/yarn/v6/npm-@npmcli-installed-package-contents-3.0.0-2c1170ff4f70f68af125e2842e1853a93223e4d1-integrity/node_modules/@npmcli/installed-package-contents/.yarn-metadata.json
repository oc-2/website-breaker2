{
  "manifest": {
    "name": "@npmcli/installed-package-contents",
    "version": "3.0.0",
    "description": "Get the list of files installed in a package in node_modules, including bundled dependencies",
    "author": {
      "name": "GitHub Inc."
    },
    "main": "lib/index.js",
    "bin": {
      "installed-package-contents": "bin/index.js"
    },
    "license": "ISC",
    "scripts": {
      "test": "tap",
      "snap": "tap",
      "lint": "npm run eslint",
      "postlint": "template-oss-check",
      "template-oss-apply": "template-oss-apply --force",
      "lintfix": "npm run eslint -- --fix",
      "posttest": "npm run lint",
      "eslint": "eslint \"**/*.{js,cjs,ts,mjs,jsx,tsx}\""
    },
    "devDependencies": {
      "@npmcli/eslint-config": "^5.0.0",
      "@npmcli/template-oss": "4.23.3",
      "tap": "^16.3.0"
    },
    "dependencies": {
      "npm-bundled": "^4.0.0",
      "npm-normalize-package-bin": "^4.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/npm/installed-package-contents.git"
    },
    "files": [
      "bin/",
      "lib/"
    ],
    "engines": {
      "node": "^18.17.0 || >=20.5.0"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "version": "4.23.3",
      "publish": true
    },
    "tap": {
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@npmcli-installed-package-contents-3.0.0-2c1170ff4f70f68af125e2842e1853a93223e4d1-integrity/node_modules/@npmcli/installed-package-contents/package.json",
    "readmeFilename": "README.md",
    "readme": "# @npmcli/installed-package-contents\n\nGet the list of files installed in a package in node_modules, including\nbundled dependencies.\n\nThis is useful if you want to remove a package node from the tree _without_\nremoving its child nodes, for example to extract a new version of the\ndependency into place safely.\n\nIt's sort of the reflection of [npm-packlist](http://npm.im/npm-packlist),\nbut for listing out the _installed_ files rather than the files that _will_\nbe installed.  This is of course a much simpler operation, because we don't\nhave to handle ignore files or package.json `files` lists.\n\n## USAGE\n\n```js\n// programmatic usage\nconst pkgContents = require('@npmcli/installed-package-contents')\n\npkgContents({ path: 'node_modules/foo', depth: 1 }).then(files => {\n  // files is an array of items that need to be passed to\n  // rimraf or moved out of the way to make the folder empty\n  // if foo bundled dependencies, those will be included.\n  // It will not traverse into child directories, because we set\n  // depth:1 in the options.\n  // If the folder doesn't exist, this returns an empty array.\n})\n\npkgContents({ path: 'node_modules/foo', depth: Infinity }).then(files => {\n  // setting depth:Infinity tells it to keep walking forever\n  // until it hits something that isn't a directory, so we'll\n  // just get the list of all files, but not their containing\n  // directories.\n})\n```\n\nAs a CLI:\n\n```bash\n$ installed-package-contents node_modules/bundle-some -d1\nnode_modules/.bin/some\nnode_modules/bundle-some/package.json\nnode_modules/bundle-some/node_modules/@scope/baz\nnode_modules/bundle-some/node_modules/.bin/foo\nnode_modules/bundle-some/node_modules/foo\n```\n\nCLI options:\n\n```\nUsage:\n  installed-package-contents <path> [-d<n> --depth=<n>]\n\nLists the files installed for a package specified by <path>.\n\nOptions:\n  -d<n> --depth=<n>   Provide a numeric value (\"Infinity\" is allowed)\n                      to specify how deep in the file tree to traverse.\n                      Default=1\n  -h --help           Show this usage information\n```\n\n## OPTIONS\n\n* `depth` Number, default `1`.  How deep to traverse through folders to get\n    contents.  Typically you'd want to set this to either `1` (to get the\n    surface files and folders) or `Infinity` (to get all files), but any\n    other positive number is supported as well.  If set to `0` or a\n    negative number, returns the path provided and (if it is a package) its\n    set of linked bins.\n* `path` Required.  Path to the package in `node_modules` where traversal\n    should begin.\n\n## RETURN VALUE\n\nA Promise that resolves to an array of fully-resolved files and folders\nmatching the criteria.  This includes all bundled dependencies in\n`node_modules`, and any linked executables in `node_modules/.bin` that the\npackage caused to be installed.\n\nAn empty or missing package folder will return an empty array.  Empty\ndirectories _within_ package contents are listed, even if the `depth`\nargument would cause them to be traversed into.\n\n## CAVEAT\n\nIf using this module to generate a list of files that should be recursively\nremoved to clear away the package, note that this will leave empty\ndirectories behind in certain cases:\n\n- If all child packages are bundled dependencies, then the\n    `node_modules` folder will remain.\n- If all child packages within a given scope were bundled dependencies,\n    then the `node_modules/@scope` folder will remain.\n- If all linked bin scripts were removed, then an empty `node_modules/.bin`\n    folder will remain.\n\nIn the interest of speed and algorithmic complexity, this module does _not_\ndo a subsequent readdir to see if it would remove all directory entries,\nthough it would be easier to look at if it returned `node_modules` or\n`.bin` in that case rather than the contents.  However, if the intent is to\npass these arguments to `rimraf`, it hardly makes sense to do _two_\n`readdir` calls just so that we can have the luxury of having to make a\nthird.\n\nSince the primary use case is to delete a package's contents so that they\ncan be re-filled with a new version of that package, this caveat does not\npose a problem.  Empty directories are already ignored by both npm and git.\n",
    "licenseText": "The ISC License\n\nCopyright (c) npm, Inc.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@npmcli/installed-package-contents/-/installed-package-contents-3.0.0.tgz#2c1170ff4f70f68af125e2842e1853a93223e4d1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@npmcli/installed-package-contents/-/installed-package-contents-3.0.0.tgz",
    "hash": "2c1170ff4f70f68af125e2842e1853a93223e4d1",
    "integrity": "sha512-fkxoPuFGvxyrH+OQzyTkX2LUEamrF4jZSmxjAtPPHHGO0dqsQ8tTKjnIS8SAnPHdk2I03BDtSMR5K/4loKg79Q==",
    "registry": "npm",
    "packageName": "@npmcli/installed-package-contents",
    "cacheIntegrity": "sha512-fkxoPuFGvxyrH+OQzyTkX2LUEamrF4jZSmxjAtPPHHGO0dqsQ8tTKjnIS8SAnPHdk2I03BDtSMR5K/4loKg79Q== sha1-LBFw/09w9orxJeKELhhTqTIj5NE="
  },
  "registry": "npm",
  "hash": "2c1170ff4f70f68af125e2842e1853a93223e4d1"
}