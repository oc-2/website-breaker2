{
  "manifest": {
    "name": "@jridgewell/source-map",
    "version": "0.3.6",
    "description": "Packages @jridgewell/trace-mapping and @jridgewell/gen-mapping into the familiar source-map API",
    "keywords": [
      "sourcemap",
      "source",
      "map"
    ],
    "author": {
      "name": "Justin Ridgewell",
      "email": "justin@ridgewell.name"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/jridgewell/source-map"
    },
    "main": "dist/source-map.cjs",
    "module": "dist/source-map.mjs",
    "types": "dist/types/source-map.d.ts",
    "exports": {
      ".": [
        {
          "types": "./dist/types/source-map.d.ts",
          "browser": "./dist/source-map.umd.js",
          "require": "./dist/source-map.cjs",
          "import": "./dist/source-map.mjs"
        },
        "./dist/source-map.cjs"
      ],
      "./package.json": "./package.json"
    },
    "files": [
      "dist"
    ],
    "scripts": {
      "prebuild": "rm -rf dist",
      "build": "run-s -n build:*",
      "build:rollup": "rollup -c rollup.config.js",
      "build:ts": "tsc --project tsconfig.build.json",
      "lint": "run-s -n lint:*",
      "lint:prettier": "npm run test:lint:prettier -- --write",
      "lint:ts": "npm run test:lint:ts -- --fix",
      "test": "run-s -n test:lint test:only",
      "test:debug": "ts-mocha --inspect-brk",
      "test:lint": "run-s -n test:lint:*",
      "test:lint:prettier": "prettier --check '{src,test}/**/*.ts'",
      "test:lint:ts": "eslint '{src,test}/**/*.ts'",
      "test:only": "ts-mocha",
      "test:coverage": "c8 --reporter text --reporter html ts-mocha",
      "test:watch": "ts-mocha --watch",
      "prepublishOnly": "npm run preversion",
      "preversion": "run-s test build"
    },
    "devDependencies": {
      "@rollup/plugin-node-resolve": "13.2.1",
      "@rollup/plugin-typescript": "8.3.0",
      "@types/mocha": "9.1.1",
      "@types/node": "17.0.30",
      "@typescript-eslint/eslint-plugin": "5.10.0",
      "@typescript-eslint/parser": "5.10.0",
      "c8": "7.11.0",
      "eslint": "8.7.0",
      "eslint-config-prettier": "8.3.0",
      "mocha": "10.0.0",
      "npm-run-all": "4.1.5",
      "prettier": "2.5.1",
      "rollup": "2.66.0",
      "ts-mocha": "10.0.0",
      "typescript": "4.5.5"
    },
    "dependencies": {
      "@jridgewell/gen-mapping": "^0.3.5",
      "@jridgewell/trace-mapping": "^0.3.25"
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@jridgewell-source-map-0.3.6-9d71ca886e32502eb9362c9a74a46787c36df81a-integrity/node_modules/@jridgewell/source-map/package.json",
    "readmeFilename": "README.md",
    "readme": "# @jridgewell/source-map\n\n> Packages `@jridgewell/trace-mapping` and `@jridgewell/gen-mapping` into the familiar source-map API\n\nThis isn't the full API, but it's the core functionality. This wraps\n[@jridgewell/trace-mapping][trace-mapping] and [@jridgewell/gen-mapping][gen-mapping]\nimplementations.\n\n## Installation\n\n```sh\nnpm install @jridgewell/source-map\n```\n\n## Usage\n\nTODO\n\n### SourceMapConsumer\n\n```typescript\nimport { SourceMapConsumer } from '@jridgewell/source-map';\nconst smc = new SourceMapConsumer({\n  version: 3,\n  names: ['foo'],\n  sources: ['input.js'],\n  mappings: 'AAAAA',\n});\n```\n\n#### SourceMapConsumer.fromSourceMap(mapGenerator[, mapUrl])\n\nTransforms a `SourceMapGenerator` into a `SourceMapConsumer`.\n\n```typescript\nconst smg = new SourceMapGenerator();\n\nconst smc = SourceMapConsumer.fromSourceMap(map);\nsmc.originalPositionFor({ line: 1, column: 0 });\n```\n\n#### SourceMapConsumer.prototype.originalPositionFor(generatedPosition)\n\n```typescript\nconst smc = new SourceMapConsumer(map);\nsmc.originalPositionFor({ line: 1, column: 0 });\n```\n\n#### SourceMapConsumer.prototype.mappings\n\n```typescript\nconst smc = new SourceMapConsumer(map);\nsmc.mappings; // AAAA\n```\n\n#### SourceMapConsumer.prototype.allGeneratedPositionsFor(originalPosition)\n\n```typescript\nconst smc = new SourceMapConsumer(map);\nsmc.allGeneratedpositionsfor({ line: 1, column: 5, source: \"baz.ts\" });\n// [\n//   { line: 2, column: 8 }\n// ]\n```\n\n#### SourceMapConsumer.prototype.eachMapping(callback[, context[, order]])\n\n> This implementation currently does not support the \"order\" parameter.\n> This function can only iterate in Generated order.\n\n```typescript\nconst smc = new SourceMapConsumer(map);\nsmc.eachMapping((mapping) => {\n// { source: 'baz.ts',\n//   generatedLine: 4,\n//   generatedColumn: 5,\n//   originalLine: 4,\n//   originalColumn: 5,\n//   name: null }\n});\n```\n\n#### SourceMapConsumer.prototype.generatedPositionFor(originalPosition)\n\n```typescript\nconst smc = new SourceMapConsumer(map);\nsmc.generatedPositionFor({ line: 1, column: 5, source: \"baz.ts\" });\n// { line: 2, column: 8 }\n```\n\n#### SourceMapConsumer.prototype.hasContentsOfAllSources()\n\n```typescript\nconst smc = new SourceMapConsumer(map);\nsmc.hasContentsOfAllSources();\n// true\n```\n\n#### SourceMapConsumer.prototype.sourceContentFor(source[, returnNullOnMissing])\n\n```typescript\nconst smc = new SourceMapConsumer(map);\nsmc.generatedPositionFor(\"baz.ts\");\n// \"export default ...\"\n```\n\n#### SourceMapConsumer.prototype.version\n\nReturns the source map's version\n\n### SourceMapGenerator\n\n```typescript\nimport { SourceMapGenerator } from '@jridgewell/source-map';\nconst smg = new SourceMapGenerator({\n  file: 'output.js',\n  sourceRoot: 'https://example.com/',\n});\n```\n\n#### SourceMapGenerator.fromSourceMap(map)\n\nTransform a `SourceMapConsumer` into a `SourceMapGenerator`.\n\n```typescript\nconst smc = new SourceMapConsumer();\nconst smg = SourceMapGenerator.fromSourceMap(smc);\n```\n\n#### SourceMapGenerator.prototype.applySourceMap(sourceMapConsumer[, sourceFile[, sourceMapPath]])\n\n> This method is not implemented yet\n\n#### SourceMapGenerator.prototype.addMapping(mapping)\n\n```typescript\nconst smg = new SourceMapGenerator();\nsmg.addMapping({\n  generated: { line: 1, column: 0 },\n  source: 'input.js',\n  original: { line: 1, column: 0 },\n  name: 'foo',\n});\n```\n\n#### SourceMapGenerator.prototype.setSourceContent(sourceFile, sourceContent)\n\n```typescript\nconst smg = new SourceMapGenerator();\nsmg.setSourceContent('input.js', 'foobar');\n```\n\n#### SourceMapGenerator.prototype.toJSON()\n\n```typescript\nconst smg = new SourceMapGenerator();\nsmg.toJSON(); // { version: 3, names: [], sources: [], mappings: '' }\n```\n\n#### SourceMapGenerator.prototype.toString()\n\n```typescript\nconst smg = new SourceMapGenerator();\nsmg.toJSON(); // \"{version:3,names:[],sources:[],mappings:''}\"\n```\n\n#### SourceMapGenerator.prototype.toDecodedMap()\n\n```typescript\nconst smg = new SourceMapGenerator();\nsmg.toDecodedMap(); // { version: 3, names: [], sources: [], mappings: [] }\n```\n\n## Known differences with other implementations\n\nThis implementation has some differences with `source-map` and `source-map-js`.\n\n- `SourceMapConsumer.prototype.eachMapping()`\n  - Does not support the `order` argument\n- `SourceMapGenerator.prototype.applySourceMap()`\n  - Not implemented\n\n[trace-mapping]: https://github.com/jridgewell/trace-mapping/\n[gen-mapping]: https://github.com/jridgewell/gen-mapping/\n",
    "licenseText": "Copyright 2019 Justin Ridgewell <jridgewell@google.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@jridgewell/source-map/-/source-map-0.3.6.tgz#9d71ca886e32502eb9362c9a74a46787c36df81a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@jridgewell/source-map/-/source-map-0.3.6.tgz",
    "hash": "9d71ca886e32502eb9362c9a74a46787c36df81a",
    "integrity": "sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==",
    "registry": "npm",
    "packageName": "@jridgewell/source-map",
    "cacheIntegrity": "sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ== sha1-nXHKiG4yUC65NiyadKRnh8Nt+Bo="
  },
  "registry": "npm",
  "hash": "9d71ca886e32502eb9362c9a74a46787c36df81a"
}