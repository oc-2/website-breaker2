{
  "manifest": {
    "name": "@jsonjoy.com/json-pack",
    "version": "1.1.0",
    "description": "High-performance JSON serialization library",
    "author": {
      "name": "streamich",
      "url": "https://github.com/streamich"
    },
    "homepage": "https://github.com/jsonjoy-com/json-pack",
    "repository": {
      "type": "git",
      "url": "https://github.com/jsonjoy-com/json-pack.git"
    },
    "license": "Apache-2.0",
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/streamich"
    },
    "keywords": [
      "json",
      "cbor",
      "dag-json",
      "dag-cbor",
      "pack",
      "msgpack",
      "MessagePack",
      "json-pack",
      "ubjson",
      "bencode",
      "ion",
      "amazon-ion",
      "bson",
      "resp",
      "resp3",
      "redis",
      "resp-3",
      "resp2"
    ],
    "engines": {
      "node": ">=10.0"
    },
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "typings": "lib/index.d.ts",
    "files": [
      "LICENSE",
      "lib/"
    ],
    "scripts": {
      "prettier": "prettier --ignore-path .gitignore --write \"src/**/*.{ts,tsx,js,jsx}\"",
      "prettier:check": "prettier --ignore-path .gitignore --list-different 'src/**/*.{ts,tsx,js,jsx}'",
      "lint": "yarn tslint",
      "tslint": "tslint 'src/**/*.{js,jsx,ts,tsx}' -t verbose --project .",
      "clean": "rimraf lib typedocs coverage gh-pages yarn-error.log",
      "build": "tsc --project tsconfig.build.json --module commonjs --target es2020 --outDir lib",
      "jest": "node -r ts-node/register ./node_modules/.bin/jest",
      "test": "jest --maxWorkers 7",
      "test:ci": "yarn jest --maxWorkers 3 --no-cache",
      "coverage": "yarn test --collectCoverage",
      "typedoc": "typedoc",
      "build:pages": "rimraf gh-pages && mkdir -p gh-pages && cp -r typedocs/* gh-pages && cp -r coverage gh-pages/coverage",
      "deploy:pages": "gh-pages -d gh-pages",
      "publish-coverage-and-typedocs": "yarn typedoc && yarn coverage && yarn build:pages && yarn deploy:pages"
    },
    "peerDependencies": {
      "tslib": "2"
    },
    "dependencies": {
      "@jsonjoy.com/base64": "^1.1.1",
      "@jsonjoy.com/util": "^1.1.2",
      "hyperdyperid": "^1.2.0",
      "thingies": "^1.20.0"
    },
    "devDependencies": {
      "@msgpack/msgpack": "^3.0.0-beta2",
      "@redis/client": "^1.5.12",
      "@shelacek/ubjson": "^1.1.1",
      "@types/benchmark": "^2.1.2",
      "@types/jest": "^29.5.12",
      "app-root-path": "^3.1.0",
      "axios": "^1.3.5",
      "base64-js": "^1.5.1",
      "benchmark": "^2.1.4",
      "bson": "^5.4.0",
      "cbor": "^9.0.2",
      "cbor-js": "^0.1.0",
      "cbor-sync": "^1.0.4",
      "cbor-x": "^1.5.9",
      "cborg": "^2.0.3",
      "fast-safe-stringify": "^2.1.1",
      "fast-stable-stringify": "^1.0.0",
      "fastest-stable-stringify": "^2.0.2",
      "gh-pages": "^5.0.0",
      "ion-js": "^4.3.0",
      "jest": "^29.7.0",
      "js-base64": "^3.7.2",
      "jsbi": "^4.3.0",
      "json-pack-napi": "^0.0.2",
      "messagepack": "^1.1.12",
      "msgpack-lite": "^0.1.26",
      "msgpack5": "^6.0.2",
      "msgpackr": "^1.6.0",
      "pako": "^2.0.4",
      "prettier": "^3.2.5",
      "pretty-quick": "^3.1.3",
      "redis-parser": "^3.0.0",
      "rimraf": "^5.0.0",
      "safe-stable-stringify": "^2.3.1",
      "secure-json-parse": "^2.4.0",
      "tinybench": "^2.4.0",
      "ts-jest": "^29.1.2",
      "ts-loader": "^9.5.1",
      "ts-node": "^10.9.2",
      "tslib": "^2.6.2",
      "tslint": "^6.1.3",
      "tslint-config-common": "^1.6.2",
      "typedoc": "^0.25.12",
      "typescript": "^5.3.3"
    },
    "jest": {
      "verbose": true,
      "testEnvironmentOptions": {
        "url": "http://localhost/"
      },
      "setupFiles": [
        "<rootDir>/src/__tests__/setup.js"
      ],
      "moduleFileExtensions": [
        "ts",
        "js"
      ],
      "transform": {
        "^.+\\.ts$": "ts-jest"
      },
      "transformIgnorePatterns": [],
      "testRegex": ".*/(__tests__|__jest__|demo)/.*\\.(test|spec)\\.ts$"
    },
    "prettier": {
      "arrowParens": "always",
      "printWidth": 120,
      "tabWidth": 2,
      "useTabs": false,
      "semi": true,
      "singleQuote": true,
      "trailingComma": "all",
      "bracketSpacing": false
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@jsonjoy-com-json-pack-1.1.0-33ca57ee29d12feef540f2139225597469dec894-integrity/node_modules/@jsonjoy.com/json-pack/package.json",
    "readmeFilename": "README.md",
    "readme": "# json-pack\n\nHigh performance JSON serialization and deserialization library for JavaScript, Node.js, browser.\n\n`json-pack` contains implementations of various JSON codecs into binary,\nformats, such as MessagePack, CBOR and other formats.\n\n- [__MessagePack__](./src/msgpack/README.md)\n- [__CBOR__](./src/cbor/README.md)\n- DAG-CBOR\n- JSON\n- DAG-JSON\n- UBJSON\n- Amazon Ion\n- RESP3\n- Bencode\n\n\n## Benchmarks\n\nEncoding:\n\n```\nnpx ts-node benchmarks/json-pack/bench.encoding.ts \n=============================================================================== Benchmark: Encoding\nWarmup: 1000x , Node.js: v20.0.0 , Arch: arm64 , CPU: Apple M1\n---------------------------------------------------------------------------- Small object, 44 bytes\n🤞 json-pack JsonEncoder x 5,385,617 ops/sec ±0.53% (100 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 2,254,954 ops/sec ±0.83% (97 runs sampled)\n🤞 json-pack CborEncoderFast x 5,953,159 ops/sec ±1.12% (92 runs sampled)\n🤞 json-pack CborEncoder x 6,248,036 ops/sec ±0.29% (98 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 3,121,940 ops/sec ±0.16% (99 runs sampled)\n🤞 JSON.stringify() x 3,866,116 ops/sec ±0.11% (101 runs sampled)\n🤞 @msgpack/msgpack x 1,406,546 ops/sec ±0.94% (93 runs sampled)\n🤞 msgpackr x 2,404,916 ops/sec ±3.22% (86 runs sampled)\n🤞 cbor-x x 4,737,433 ops/sec ±1.00% (97 runs sampled)\n🤞 msgpack-lite x 987,201 ops/sec ±2.84% (91 runs sampled)\n🤞 msgpack5 x 197,867 ops/sec ±3.65% (84 runs sampled)\n🤞 messagepack x 171,865 ops/sec ±4.44% (74 runs sampled)\nFastest is 🤞 json-pack CborEncoder\n------------------------------------------------------------------------- Typical object, 993 bytes\n🤞 json-pack JsonEncoder x 299,970 ops/sec ±0.30% (97 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 211,651 ops/sec ±0.18% (100 runs sampled)\n🤞 json-pack CborEncoderFast x 429,535 ops/sec ±3.38% (93 runs sampled)\n🤞 json-pack CborEncoder x 428,848 ops/sec ±0.71% (97 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 322,982 ops/sec ±0.67% (97 runs sampled)\n🤞 JSON.stringify() x 306,828 ops/sec ±1.94% (90 runs sampled)\n🤞 @msgpack/msgpack x 199,937 ops/sec ±5.52% (93 runs sampled)\n🤞 msgpackr x 317,457 ops/sec ±2.18% (90 runs sampled)\n🤞 cbor-x x 401,854 ops/sec ±3.20% (92 runs sampled)\n🤞 msgpack-lite x 135,110 ops/sec ±1.29% (94 runs sampled)\n🤞 msgpack5 x 15,217 ops/sec ±3.72% (85 runs sampled)\n🤞 messagepack x 13,853 ops/sec ±4.73% (71 runs sampled)\nFastest is 🤞 json-pack CborEncoder\n-------------------------------------------------------------------------- Large object, 3741 bytes\n🤞 json-pack JsonEncoder x 87,312 ops/sec ±1.10% (96 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 64,718 ops/sec ±0.45% (96 runs sampled)\n🤞 json-pack CborEncoderFast x 134,615 ops/sec ±0.19% (97 runs sampled)\n🤞 json-pack CborEncoder x 128,975 ops/sec ±0.20% (98 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 103,325 ops/sec ±1.62% (98 runs sampled)\n🤞 JSON.stringify() x 101,067 ops/sec ±1.36% (95 runs sampled)\n🤞 @msgpack/msgpack x 61,715 ops/sec ±0.22% (98 runs sampled)\n🤞 msgpackr x 95,175 ops/sec ±3.84% (95 runs sampled)\n🤞 cbor-x x 111,658 ops/sec ±1.34% (95 runs sampled)\n🤞 msgpack-lite x 41,364 ops/sec ±0.28% (100 runs sampled)\n🤞 msgpack5 x 3,262 ops/sec ±4.32% (71 runs sampled)\n🤞 messagepack x 4,167 ops/sec ±7.29% (65 runs sampled)\nFastest is 🤞 json-pack CborEncoderFast\n-------------------------------------------------------------------- Very large object, 45750 bytes\n🤞 json-pack JsonEncoder x 5,687 ops/sec ±1.92% (94 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 5,813 ops/sec ±2.51% (97 runs sampled)\n🤞 json-pack CborEncoderFast x 5,749 ops/sec ±0.67% (98 runs sampled)\n🤞 json-pack CborEncoder x 5,515 ops/sec ±0.70% (98 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 5,027 ops/sec ±0.19% (100 runs sampled)\n🤞 JSON.stringify() x 7,687 ops/sec ±0.87% (99 runs sampled)\n🤞 @msgpack/msgpack x 3,379 ops/sec ±2.20% (97 runs sampled)\n🤞 msgpackr x 5,929 ops/sec ±15.26% (96 runs sampled)\n🤞 cbor-x x 5,032 ops/sec ±5.17% (90 runs sampled)\n🤞 msgpack-lite x 2,173 ops/sec ±1.17% (97 runs sampled)\n🤞 msgpack5 x 179 ops/sec ±2.95% (68 runs sampled)\n🤞 messagepack x 167 ops/sec ±1.09% (79 runs sampled)\nFastest is 🤞 JSON.stringify()\n------------------------------------------------------------------ Object with many keys, 969 bytes\n🤞 json-pack JsonEncoder x 213,447 ops/sec ±3.31% (95 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 168,303 ops/sec ±2.13% (95 runs sampled)\n🤞 json-pack CborEncoderFast x 275,511 ops/sec ±0.40% (95 runs sampled)\n🤞 json-pack CborEncoder x 270,949 ops/sec ±0.32% (97 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 210,525 ops/sec ±0.66% (99 runs sampled)\n🤞 JSON.stringify() x 200,767 ops/sec ±0.19% (101 runs sampled)\n🤞 @msgpack/msgpack x 163,665 ops/sec ±0.81% (98 runs sampled)\n🤞 msgpackr x 151,889 ops/sec ±0.27% (96 runs sampled)\n🤞 cbor-x x 191,010 ops/sec ±0.44% (96 runs sampled)\n🤞 msgpack-lite x 93,537 ops/sec ±0.68% (99 runs sampled)\n🤞 msgpack5 x 28,581 ops/sec ±1.74% (93 runs sampled)\n🤞 messagepack x 8,330 ops/sec ±5.00% (61 runs sampled)\nFastest is 🤞 json-pack CborEncoderFast\n------------------------------------------------------------------------- String ladder, 3398 bytes\n🤞 json-pack JsonEncoder x 147,755 ops/sec ±0.23% (97 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 128,378 ops/sec ±0.15% (96 runs sampled)\n🤞 json-pack CborEncoderFast x 298,037 ops/sec ±0.73% (98 runs sampled)\n🤞 json-pack CborEncoder x 293,608 ops/sec ±0.22% (97 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 244,864 ops/sec ±3.92% (92 runs sampled)\n🤞 JSON.stringify() x 165,819 ops/sec ±1.72% (94 runs sampled)\n🤞 @msgpack/msgpack x 79,127 ops/sec ±1.43% (93 runs sampled)\n🤞 msgpackr x 236,254 ops/sec ±1.45% (94 runs sampled)\n🤞 cbor-x x 206,835 ops/sec ±1.26% (92 runs sampled)\n🤞 msgpack-lite x 157,499 ops/sec ±0.39% (98 runs sampled)\n🤞 msgpack5 x 55,363 ops/sec ±2.75% (88 runs sampled)\n🤞 messagepack x 8,261 ops/sec ±2.97% (72 runs sampled)\nFastest is 🤞 json-pack CborEncoderFast\n-------------------------------------------------------------------------- Long strings, 7011 bytes\n🤞 json-pack JsonEncoder x 51,334 ops/sec ±0.16% (99 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 27,108 ops/sec ±4.89% (90 runs sampled)\n🤞 json-pack CborEncoderFast x 374,042 ops/sec ±6.39% (91 runs sampled)\n🤞 json-pack CborEncoder x 424,864 ops/sec ±0.35% (97 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 363,465 ops/sec ±1.91% (85 runs sampled)\n🤞 JSON.stringify() x 59,793 ops/sec ±0.14% (100 runs sampled)\n🤞 @msgpack/msgpack x 57,373 ops/sec ±0.13% (98 runs sampled)\n🤞 msgpackr x 372,751 ops/sec ±2.17% (90 runs sampled)\n🤞 cbor-x x 389,277 ops/sec ±1.60% (93 runs sampled)\n🤞 msgpack-lite x 170,279 ops/sec ±0.82% (97 runs sampled)\n🤞 msgpack5 x 83,809 ops/sec ±2.80% (83 runs sampled)\n🤞 messagepack x 20,076 ops/sec ±1.45% (87 runs sampled)\nFastest is 🤞 json-pack CborEncoder\n-------------------------------------------------------------------------- Short strings, 170 bytes\n🤞 json-pack JsonEncoder x 1,577,757 ops/sec ±0.16% (98 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 1,057,420 ops/sec ±0.38% (100 runs sampled)\n🤞 json-pack CborEncoderFast x 1,844,775 ops/sec ±0.20% (100 runs sampled)\n🤞 json-pack CborEncoder x 1,468,011 ops/sec ±0.23% (98 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 1,240,577 ops/sec ±0.19% (98 runs sampled)\n🤞 JSON.stringify() x 1,852,916 ops/sec ±0.20% (100 runs sampled)\n🤞 @msgpack/msgpack x 781,414 ops/sec ±0.42% (92 runs sampled)\n🤞 msgpackr x 1,672,474 ops/sec ±0.23% (99 runs sampled)\n🤞 cbor-x x 1,351,338 ops/sec ±0.20% (97 runs sampled)\n🤞 msgpack-lite x 416,300 ops/sec ±0.76% (96 runs sampled)\n🤞 msgpack5 x 151,657 ops/sec ±1.97% (91 runs sampled)\n🤞 messagepack x 35,124 ops/sec ±5.60% (61 runs sampled)\nFastest is 🤞 JSON.stringify()\n-------------------------------------------------------------------------------- Numbers, 136 bytes\n🤞 json-pack JsonEncoder x 1,708,133 ops/sec ±1.09% (98 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 1,135,630 ops/sec ±1.67% (95 runs sampled)\n🤞 json-pack CborEncoderFast x 2,658,037 ops/sec ±1.33% (97 runs sampled)\n🤞 json-pack CborEncoder x 3,084,914 ops/sec ±0.24% (101 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 1,620,958 ops/sec ±2.15% (94 runs sampled)\n🤞 JSON.stringify() x 1,602,303 ops/sec ±0.24% (98 runs sampled)\n🤞 @msgpack/msgpack x 997,885 ops/sec ±1.70% (97 runs sampled)\n🤞 msgpackr x 2,659,862 ops/sec ±0.51% (96 runs sampled)\n🤞 cbor-x x 3,116,954 ops/sec ±0.89% (95 runs sampled)\n🤞 msgpack-lite x 892,281 ops/sec ±2.19% (92 runs sampled)\n🤞 msgpack5 x 144,567 ops/sec ±3.06% (88 runs sampled)\n🤞 messagepack x 383,134 ops/sec ±2.95% (74 runs sampled)\nFastest is 🤞 cbor-x\n--------------------------------------------------------------------------------- Tokens, 308 bytes\n🤞 json-pack JsonEncoder x 1,370,517 ops/sec ±0.52% (98 runs sampled)\n🤞 Buffer.from(JSON.stringify()) x 1,016,856 ops/sec ±0.16% (93 runs sampled)\n🤞 json-pack CborEncoderFast x 1,347,193 ops/sec ±0.20% (96 runs sampled)\n🤞 json-pack CborEncoder x 1,353,358 ops/sec ±0.20% (101 runs sampled)\n🤞 json-pack MsgPackEncoderFast x 1,130,418 ops/sec ±0.14% (96 runs sampled)\n🤞 JSON.stringify() x 1,549,669 ops/sec ±0.49% (97 runs sampled)\n🤞 @msgpack/msgpack x 871,477 ops/sec ±0.92% (98 runs sampled)\n🤞 msgpackr x 1,716,378 ops/sec ±0.20% (99 runs sampled)\n🤞 cbor-x x 1,951,639 ops/sec ±0.16% (100 runs sampled)\n🤞 msgpack-lite x 622,495 ops/sec ±1.03% (96 runs sampled)\n🤞 msgpack5 x 81,727 ops/sec ±2.04% (91 runs sampled)\n🤞 messagepack x 609,651 ops/sec ±1.64% (89 runs sampled)\nFastest is 🤞 cbor-x\n```\n\nDecoding:\n\n```\nnode benchmarks/json-pack/bench.decoding.js\n=============================================================================== Benchmark: Decoding\nWarmup: 1000x , Node.js: v16.14.2 , Arch: arm64 , CPU: Apple M1\n-------------------------------------------------------------------- Very large object, 45750 bytes\n👍 JSON.parse() x 3,506 ops/sec ±0.19% (100 runs sampled)\n👍 sjson.parse() x 3,336 ops/sec ±0.11% (99 runs sampled)\n👍 json-pack CborDecoderBase x 4,915 ops/sec ±0.18% (100 runs sampled)\n👍 cbor-x x 4,747 ops/sec ±0.15% (100 runs sampled)\n👍 cbor x 260 ops/sec ±0.29% (90 runs sampled)\n👍 json-pack MsgPackDecoderFast x 5,506 ops/sec ±0.48% (100 runs sampled)\n👍 msgpackr x 4,729 ops/sec ±0.23% (101 runs sampled)\n👍 @msgpack/msgpack x 4,096 ops/sec ±0.25% (100 runs sampled)\n👍 msgpack5 x 920 ops/sec ±0.34% (99 runs sampled)\n👍 msgpack-lite x 1,223 ops/sec ±0.10% (100 runs sampled)\n👍 messagepack x 194 ops/sec ±1.93% (73 runs sampled)\nFastest is 👍 json-pack MsgPackDecoderFast\n-------------------------------------------------------------------------- Large object, 3741 bytes\n👍 JSON.parse() x 91,582 ops/sec ±0.30% (100 runs sampled)\n👍 sjson.parse() x 84,411 ops/sec ±0.16% (99 runs sampled)\n👍 json-pack CborDecoderBase x 94,618 ops/sec ±0.27% (97 runs sampled)\n👍 cbor-x x 108,102 ops/sec ±0.37% (101 runs sampled)\n👍 cbor x 4,845 ops/sec ±0.79% (95 runs sampled)\n👍 json-pack MsgPackDecoderFast x 102,544 ops/sec ±0.39% (99 runs sampled)\n👍 msgpackr x 111,668 ops/sec ±0.16% (101 runs sampled)\n👍 @msgpack/msgpack x 56,952 ops/sec ±0.51% (97 runs sampled)\n👍 msgpack5 x 17,420 ops/sec ±0.60% (101 runs sampled)\n👍 msgpack-lite x 20,536 ops/sec ±0.23% (98 runs sampled)\n👍 messagepack x 3,247 ops/sec ±2.30% (87 runs sampled)\nFastest is 👍 msgpackr\n------------------------------------------------------------------------- Typical object, 993 bytes\n👍 JSON.parse() x 304,670 ops/sec ±0.98% (97 runs sampled)\n👍 sjson.parse() x 283,259 ops/sec ±0.20% (98 runs sampled)\n👍 json-pack CborDecoderBase x 298,666 ops/sec ±0.19% (100 runs sampled)\n👍 cbor-x x 322,995 ops/sec ±0.71% (97 runs sampled)\n👍 cbor x 14,391 ops/sec ±0.88% (95 runs sampled)\n👍 json-pack MsgPackDecoderFast x 321,984 ops/sec ±0.23% (100 runs sampled)\n👍 msgpackr x 328,671 ops/sec ±0.31% (99 runs sampled)\n👍 @msgpack/msgpack x 198,604 ops/sec ±0.85% (96 runs sampled)\n👍 msgpack5 x 51,549 ops/sec ±0.32% (99 runs sampled)\n👍 msgpack-lite x 67,171 ops/sec ±0.19% (99 runs sampled)\n👍 messagepack x 9,464 ops/sec ±1.95% (92 runs sampled)\nFastest is 👍 msgpackr\n---------------------------------------------------------------------------- Small object, 44 bytes\n👍 JSON.parse() x 2,654,389 ops/sec ±0.28% (98 runs sampled)\n👍 sjson.parse() x 2,325,941 ops/sec ±0.21% (98 runs sampled)\n👍 json-pack CborDecoderBase x 3,357,402 ops/sec ±0.31% (99 runs sampled)\n👍 cbor-x x 4,133,737 ops/sec ±0.29% (101 runs sampled)\n👍 cbor x 112,776 ops/sec ±5.79% (88 runs sampled)\n👍 json-pack MsgPackDecoderFast x 3,359,127 ops/sec ±0.56% (98 runs sampled)\n👍 msgpackr x 3,436,592 ops/sec ±0.35% (97 runs sampled)\n👍 @msgpack/msgpack x 2,288,251 ops/sec ±0.52% (94 runs sampled)\n👍 msgpack5 x 377,061 ops/sec ±0.67% (96 runs sampled)\n👍 msgpack-lite x 872,569 ops/sec ±0.31% (100 runs sampled)\n👍 messagepack x 116,422 ops/sec ±1.84% (86 runs sampled)\nFastest is 👍 cbor-x\n------------------------------------------------------------------ Object with many keys, 969 bytes\n👍 JSON.parse() x 270,312 ops/sec ±0.57% (98 runs sampled)\n👍 sjson.parse() x 242,328 ops/sec ±3.10% (97 runs sampled)\n👍 json-pack CborDecoderBase x 81,403 ops/sec ±0.42% (96 runs sampled)\n👍 cbor-x x 93,131 ops/sec ±0.48% (99 runs sampled)\n👍 cbor x 8,760 ops/sec ±0.93% (95 runs sampled)\n👍 json-pack MsgPackDecoderFast x 84,014 ops/sec ±0.31% (96 runs sampled)\n👍 msgpackr x 91,477 ops/sec ±0.77% (90 runs sampled)\n👍 @msgpack/msgpack x 73,089 ops/sec ±0.56% (89 runs sampled)\n👍 msgpack5 x 23,468 ops/sec ±0.72% (97 runs sampled)\n👍 msgpack-lite x 34,630 ops/sec ±0.48% (100 runs sampled)\n👍 messagepack x 6,161 ops/sec ±1.77% (86 runs sampled)\nFastest is 👍 JSON.parse()\n------------------------------------------------------------------------- String ladder, 3398 bytes\n👍 JSON.parse() x 287,387 ops/sec ±0.36% (99 runs sampled)\n👍 sjson.parse() x 192,836 ops/sec ±0.40% (95 runs sampled)\n👍 json-pack CborDecoderBase x 177,787 ops/sec ±0.48% (98 runs sampled)\n👍 cbor-x x 320,303 ops/sec ±0.51% (94 runs sampled)\n👍 cbor x 15,416 ops/sec ±0.61% (94 runs sampled)\n👍 json-pack MsgPackDecoderFast x 179,625 ops/sec ±0.59% (100 runs sampled)\n👍 msgpackr x 375,452 ops/sec ±0.69% (94 runs sampled)\n👍 @msgpack/msgpack x 36,544 ops/sec ±0.75% (84 runs sampled)\n👍 msgpack5 x 54,428 ops/sec ±0.46% (98 runs sampled)\n👍 msgpack-lite x 25,309 ops/sec ±0.81% (75 runs sampled)\n👍 messagepack x 10,117 ops/sec ±3.99% (82 runs sampled)\nFastest is 👍 msgpackr\n-------------------------------------------------------------------------- Long strings, 7011 bytes\n👍 JSON.parse() x 117,335 ops/sec ±3.32% (89 runs sampled)\n👍 sjson.parse() x 103,275 ops/sec ±0.64% (94 runs sampled)\n👍 json-pack CborDecoderBase x 74,140 ops/sec ±7.50% (81 runs sampled)\n👍 cbor-x x 92,753 ops/sec ±0.78% (96 runs sampled)\n👍 cbor x 24,292 ops/sec ±27.70% (75 runs sampled)\n👍 json-pack MsgPackDecoderFast x 88,124 ops/sec ±1.65% (90 runs sampled)\n👍 msgpackr x 94,352 ops/sec ±0.91% (94 runs sampled)\n👍 @msgpack/msgpack x 33,256 ops/sec ±30.68% (71 runs sampled)\n👍 msgpack5 x 68,367 ops/sec ±0.70% (95 runs sampled)\n👍 msgpack-lite x 14,764 ops/sec ±2.04% (63 runs sampled)\n👍 messagepack x 17,522 ops/sec ±28.57% (66 runs sampled)\nFastest is 👍 JSON.parse()\n-------------------------------------------------------------------------- Short strings, 170 bytes\n👍 JSON.parse() x 1,077,084 ops/sec ±6.88% (77 runs sampled)\n👍 sjson.parse() x 837,130 ops/sec ±2.70% (80 runs sampled)\n👍 json-pack CborDecoderBase x 698,901 ops/sec ±4.69% (88 runs sampled)\n👍 cbor-x x 1,182,303 ops/sec ±0.39% (94 runs sampled)\n👍 cbor x 26,810 ops/sec ±14.70% (73 runs sampled)\n👍 json-pack MsgPackDecoderFast x 742,562 ops/sec ±5.06% (88 runs sampled)\n👍 msgpackr x 1,041,143 ops/sec ±2.66% (85 runs sampled)\n👍 @msgpack/msgpack x 440,652 ops/sec ±1.38% (92 runs sampled)\n👍 msgpack5 x 133,387 ops/sec ±1.14% (96 runs sampled)\n👍 msgpack-lite x 206,844 ops/sec ±0.63% (97 runs sampled)\n👍 messagepack x 23,818 ops/sec ±2.13% (94 runs sampled)\nFastest is 👍 cbor-x,👍 JSON.parse()\n-------------------------------------------------------------------------------- Numbers, 136 bytes\n👍 JSON.parse() x 1,747,460 ops/sec ±0.61% (95 runs sampled)\n👍 sjson.parse() x 1,553,635 ops/sec ±1.04% (93 runs sampled)\n👍 json-pack CborDecoderBase x 2,289,002 ops/sec ±0.93% (87 runs sampled)\n👍 cbor-x x 3,775,727 ops/sec ±2.86% (82 runs sampled)\n👍 cbor x 77,650 ops/sec ±4.32% (83 runs sampled)\n👍 json-pack MsgPackDecoderFast x 2,287,682 ops/sec ±1.54% (80 runs sampled)\n👍 msgpackr x 3,391,489 ops/sec ±0.59% (80 runs sampled)\n👍 @msgpack/msgpack x 2,297,255 ops/sec ±1.54% (78 runs sampled)\n👍 msgpack5 x 112,373 ops/sec ±1.19% (91 runs sampled)\n👍 msgpack-lite x 1,378,387 ops/sec ±0.84% (95 runs sampled)\n👍 messagepack x 1,174,740 ops/sec ±0.97% (89 runs sampled)\nFastest is 👍 cbor-x\n--------------------------------------------------------------------------------- Tokens, 308 bytes\n👍 JSON.parse() x 1,303,300 ops/sec ±2.26% (92 runs sampled)\n👍 sjson.parse() x 1,091,921 ops/sec ±2.85% (86 runs sampled)\n👍 json-pack CborDecoderBase x 1,203,319 ops/sec ±2.12% (90 runs sampled)\n👍 cbor-x x 1,787,591 ops/sec ±2.94% (74 runs sampled)\n👍 cbor x 45,127 ops/sec ±24.11% (64 runs sampled)\n👍 json-pack MsgPackDecoderFast x 1,283,322 ops/sec ±1.93% (94 runs sampled)\n👍 msgpackr x 1,890,533 ops/sec ±2.66% (90 runs sampled)\n👍 @msgpack/msgpack x 1,364,025 ops/sec ±3.78% (67 runs sampled)\n👍 msgpack5 x 117,205 ops/sec ±2.72% (90 runs sampled)\n👍 msgpack-lite x 1,316,133 ops/sec ±0.74% (99 runs sampled)\n👍 messagepack x 733,566 ops/sec ±1.55% (87 runs sampled)\nFastest is 👍 msgpackr\n```\n\nEncoder comparison:\n\n```\nnpx ts-node benchmarks/json-pack/bench.encoders.ts\n=============================================================================== Benchmark: Encoding\nWarmup: 1000x , Node.js: v20.2.0 , Arch: arm64 , CPU: Apple M1 Max\n---------------------------------------------------------------------------- Small object, 44 bytes\n👍 CborEncoderFast x 6,319,117 ops/sec ±0.11% (101 runs sampled)\n👍 CborEncoder x 6,001,443 ops/sec ±0.15% (101 runs sampled)\n👎 MsgPackEncoderFast x 6,047,466 ops/sec ±0.20% (99 runs sampled)\n👎 MsgPackEncoder x 5,493,093 ops/sec ±0.10% (101 runs sampled)\n👎 JsonEncoder x 6,018,890 ops/sec ±0.11% (97 runs sampled)\n👎 UbjsonEncoder x 6,545,118 ops/sec ±0.10% (97 runs sampled)\n👎 IonEncoderFast x 1,032,434 ops/sec ±0.14% (99 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 2,300,069 ops/sec ±0.15% (100 runs sampled)\nFastest is 👎 UbjsonEncoder\n------------------------------------------------------------------------- Typical object, 993 bytes\n👍 CborEncoderFast x 460,125 ops/sec ±0.14% (98 runs sampled)\n👍 CborEncoder x 439,506 ops/sec ±0.18% (98 runs sampled)\n👎 MsgPackEncoderFast x 458,530 ops/sec ±0.15% (99 runs sampled)\n👎 MsgPackEncoder x 449,540 ops/sec ±0.16% (100 runs sampled)\n👎 JsonEncoder x 303,410 ops/sec ±0.12% (101 runs sampled)\n👎 UbjsonEncoder x 479,450 ops/sec ±0.13% (99 runs sampled)\n👎 IonEncoderFast x 68,000 ops/sec ±0.11% (102 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 207,747 ops/sec ±0.11% (98 runs sampled)\nFastest is 👎 UbjsonEncoder\n-------------------------------------------------------------------------- Large object, 3741 bytes\n👍 CborEncoderFast x 133,608 ops/sec ±0.15% (100 runs sampled)\n👍 CborEncoder x 128,019 ops/sec ±0.13% (97 runs sampled)\n👎 MsgPackEncoderFast x 133,863 ops/sec ±0.14% (99 runs sampled)\n👎 MsgPackEncoder x 131,521 ops/sec ±0.18% (99 runs sampled)\n👎 JsonEncoder x 93,018 ops/sec ±0.13% (98 runs sampled)\n👎 UbjsonEncoder x 140,969 ops/sec ±0.15% (101 runs sampled)\n👎 IonEncoderFast x 11,523 ops/sec ±0.15% (101 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 63,389 ops/sec ±0.13% (101 runs sampled)\nFastest is 👎 UbjsonEncoder\n-------------------------------------------------------------------- Very large object, 45750 bytes\n👍 CborEncoderFast x 5,790 ops/sec ±0.15% (100 runs sampled)\n👍 CborEncoder x 5,579 ops/sec ±0.14% (100 runs sampled)\n👎 MsgPackEncoderFast x 6,005 ops/sec ±0.13% (100 runs sampled)\n👎 MsgPackEncoder x 5,670 ops/sec ±0.18% (99 runs sampled)\n👎 JsonEncoder x 6,351 ops/sec ±0.16% (101 runs sampled)\n👎 UbjsonEncoder x 6,248 ops/sec ±0.18% (99 runs sampled)\n👎 IonEncoderFast x 1,868 ops/sec ±0.21% (98 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 7,240 ops/sec ±0.19% (99 runs sampled)\nFastest is 👎 Buffer.from(JSON.stringify())\n------------------------------------------------------------------ Object with many keys, 969 bytes\n👍 CborEncoderFast x 283,371 ops/sec ±0.18% (99 runs sampled)\n👍 CborEncoder x 268,056 ops/sec ±0.17% (96 runs sampled)\n👎 MsgPackEncoderFast x 285,224 ops/sec ±0.17% (96 runs sampled)\n👎 MsgPackEncoder x 272,416 ops/sec ±0.21% (98 runs sampled)\n👎 JsonEncoder x 234,921 ops/sec ±0.21% (98 runs sampled)\n👎 UbjsonEncoder x 292,228 ops/sec ±0.19% (95 runs sampled)\n👎 IonEncoderFast x 63,456 ops/sec ±0.14% (98 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 175,341 ops/sec ±0.86% (93 runs sampled)\nFastest is 👎 UbjsonEncoder\n------------------------------------------------------------------------- String ladder, 3398 bytes\n👍 CborEncoderFast x 280,167 ops/sec ±0.20% (100 runs sampled)\n👍 CborEncoder x 283,404 ops/sec ±0.20% (97 runs sampled)\n👎 MsgPackEncoderFast x 272,800 ops/sec ±0.18% (99 runs sampled)\n👎 MsgPackEncoder x 283,433 ops/sec ±0.23% (98 runs sampled)\n👎 JsonEncoder x 147,390 ops/sec ±0.16% (98 runs sampled)\n👎 UbjsonEncoder x 290,624 ops/sec ±0.21% (98 runs sampled)\n👎 IonEncoderFast x 25,452 ops/sec ±0.17% (101 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 145,352 ops/sec ±0.23% (99 runs sampled)\nFastest is 👎 UbjsonEncoder\n-------------------------------------------------------------------------- Long strings, 7011 bytes\n👍 CborEncoderFast x 394,386 ops/sec ±0.53% (95 runs sampled)\n👍 CborEncoder x 394,442 ops/sec ±0.49% (94 runs sampled)\n👎 MsgPackEncoderFast x 386,894 ops/sec ±0.54% (95 runs sampled)\n👎 MsgPackEncoder x 394,019 ops/sec ±0.50% (95 runs sampled)\n👎 JsonEncoder x 50,781 ops/sec ±0.13% (97 runs sampled)\n👎 UbjsonEncoder x 396,184 ops/sec ±0.57% (95 runs sampled)\n👎 IonEncoderFast x 11,799 ops/sec ±0.22% (99 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 28,742 ops/sec ±0.11% (102 runs sampled)\nFastest is 👎 UbjsonEncoder,👍 CborEncoder,👍 CborEncoderFast,👎 MsgPackEncoder\n-------------------------------------------------------------------------- Short strings, 170 bytes\n👍 CborEncoderFast x 1,816,742 ops/sec ±0.16% (100 runs sampled)\n👍 CborEncoder x 1,831,503 ops/sec ±0.22% (97 runs sampled)\n👎 MsgPackEncoderFast x 1,641,743 ops/sec ±0.17% (101 runs sampled)\n👎 MsgPackEncoder x 1,694,803 ops/sec ±0.17% (97 runs sampled)\n👎 JsonEncoder x 1,595,041 ops/sec ±0.12% (99 runs sampled)\n👎 UbjsonEncoder x 1,779,112 ops/sec ±0.24% (98 runs sampled)\n👎 IonEncoderFast x 422,031 ops/sec ±0.10% (101 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 1,001,976 ops/sec ±0.24% (98 runs sampled)\nFastest is 👍 CborEncoder\n-------------------------------------------------------------------------------- Numbers, 136 bytes\n👍 CborEncoderFast x 2,822,683 ops/sec ±0.14% (99 runs sampled)\n👍 CborEncoder x 3,111,311 ops/sec ±0.20% (97 runs sampled)\n👎 MsgPackEncoderFast x 2,918,971 ops/sec ±0.14% (100 runs sampled)\n👎 MsgPackEncoder x 2,862,193 ops/sec ±0.13% (100 runs sampled)\n👎 JsonEncoder x 1,706,584 ops/sec ±0.18% (96 runs sampled)\n👎 UbjsonEncoder x 3,238,810 ops/sec ±0.15% (97 runs sampled)\n👎 IonEncoderFast x 545,885 ops/sec ±0.16% (98 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 1,216,907 ops/sec ±0.20% (98 runs sampled)\nFastest is 👎 UbjsonEncoder\n--------------------------------------------------------------------------------- Tokens, 308 bytes\n👍 CborEncoderFast x 1,360,976 ops/sec ±0.20% (96 runs sampled)\n👍 CborEncoder x 1,367,625 ops/sec ±0.16% (101 runs sampled)\n👎 MsgPackEncoderFast x 1,753,202 ops/sec ±0.19% (99 runs sampled)\n👎 MsgPackEncoder x 1,733,298 ops/sec ±0.16% (100 runs sampled)\n👎 JsonEncoder x 1,411,382 ops/sec ±0.27% (98 runs sampled)\n👎 UbjsonEncoder x 1,734,304 ops/sec ±0.17% (101 runs sampled)\n👎 IonEncoderFast x 369,161 ops/sec ±0.21% (97 runs sampled)\n👎 Buffer.from(JSON.stringify()) x 1,092,623 ops/sec ±0.15% (101 runs sampled)\nFastest is 👎 MsgPackEncoderFast\n```\n\n\n### Shallow reading\n\n```\nnode benchmarks/json-pack/bench.shallow-read.js\n=============================================================================== Benchmark: Encoding\nWarmup: 10000x , Node.js: v16.14.2 , Arch: arm64 , CPU: Apple M1\n------------------------------------------------------------------------- Typical object, 993 bytes\n👍 JSON.parse() x 314,451 ops/sec ±0.24% (94 runs sampled)\n👍 msgpackr x 332,628 ops/sec ±0.09% (99 runs sampled)\n👍 cbor-x x 326,509 ops/sec ±0.05% (101 runs sampled)\n👍 MsgPackDecoder x 368,088 ops/sec ±0.15% (100 runs sampled)\n👍 CborDecoder x 327,286 ops/sec ±0.15% (101 runs sampled)\n👍 MsgPackDecoder.{findKey,findIndex}() x 1,815,090 ops/sec ±0.07% (99 runs sampled)\n👍 MsgPackDecoder.find() x 1,797,098 ops/sec ±0.15% (98 runs sampled)\n👍 genShallowReader()(MsgPackDecoder) x 2,085,260 ops/sec ±0.19% (99 runs sampled)\nFastest is 👍 genShallowReader()(MsgPackDecoder)\n```\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2024 jsonjoy.com\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@jsonjoy.com/json-pack/-/json-pack-1.1.0.tgz#33ca57ee29d12feef540f2139225597469dec894",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@jsonjoy.com/json-pack/-/json-pack-1.1.0.tgz",
    "hash": "33ca57ee29d12feef540f2139225597469dec894",
    "integrity": "sha512-zlQONA+msXPPwHWZMKFVS78ewFczIll5lXiVPwFPCZUsrOKdxc2AvxU1HoNBmMRhqDZUR9HkC3UOm+6pME6Xsg==",
    "registry": "npm",
    "packageName": "@jsonjoy.com/json-pack",
    "cacheIntegrity": "sha512-zlQONA+msXPPwHWZMKFVS78ewFczIll5lXiVPwFPCZUsrOKdxc2AvxU1HoNBmMRhqDZUR9HkC3UOm+6pME6Xsg== sha1-M8pX7inRL+71QPITkiVZdGneyJQ="
  },
  "registry": "npm",
  "hash": "33ca57ee29d12feef540f2139225597469dec894"
}