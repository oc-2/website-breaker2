{
  "manifest": {
    "name": "@pkgjs/parseargs",
    "version": "0.11.0",
    "description": "Polyfill of future proposal for `util.parseArgs()`",
    "engines": {
      "node": ">=14"
    },
    "main": "index.js",
    "exports": {
      ".": "./index.js",
      "./package.json": "./package.json"
    },
    "scripts": {
      "coverage": "c8 --check-coverage tape 'test/*.js'",
      "test": "c8 tape 'test/*.js'",
      "posttest": "eslint .",
      "fix": "npm run posttest -- --fix"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:pkgjs/parseargs.git"
    },
    "keywords": [],
    "author": {},
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pkgjs/parseargs/issues"
    },
    "homepage": "https://github.com/pkgjs/parseargs#readme",
    "devDependencies": {
      "c8": "^7.10.0",
      "eslint": "^8.2.0",
      "eslint-plugin-node-core": "iansu/eslint-plugin-node-core",
      "tape": "^5.2.2"
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@pkgjs-parseargs-0.11.0-a77ea742fab25775145434eb1d2328cf5013ac33-integrity/node_modules/@pkgjs/parseargs/package.json",
    "readmeFilename": "README.md",
    "readme": "<!-- omit in toc -->\n# parseArgs\n\n[![Coverage][coverage-image]][coverage-url]\n\nPolyfill of `util.parseArgs()`\n\n## `util.parseArgs([config])`\n\n<!-- YAML\nadded: v18.3.0\nchanges:\n  - version: REPLACEME\n    pr-url: https://github.com/nodejs/node/pull/43459\n    description: add support for returning detailed parse information\n                 using `tokens` in input `config` and returned properties.\n-->\n\n> Stability: 1 - Experimental\n\n* `config` {Object} Used to provide arguments for parsing and to configure\n  the parser. `config` supports the following properties:\n  * `args` {string\\[]} array of argument strings. **Default:** `process.argv`\n    with `execPath` and `filename` removed.\n  * `options` {Object} Used to describe arguments known to the parser.\n    Keys of `options` are the long names of options and values are an\n    {Object} accepting the following properties:\n    * `type` {string} Type of argument, which must be either `boolean` or `string`.\n    * `multiple` {boolean} Whether this option can be provided multiple\n      times. If `true`, all values will be collected in an array. If\n      `false`, values for the option are last-wins. **Default:** `false`.\n    * `short` {string} A single character alias for the option.\n    * `default` {string | boolean | string\\[] | boolean\\[]} The default option\n      value when it is not set by args. It must be of the same type as the\n      the `type` property. When `multiple` is `true`, it must be an array.\n  * `strict` {boolean} Should an error be thrown when unknown arguments\n    are encountered, or when arguments are passed that do not match the\n    `type` configured in `options`.\n    **Default:** `true`.\n  * `allowPositionals` {boolean} Whether this command accepts positional\n    arguments.\n    **Default:** `false` if `strict` is `true`, otherwise `true`.\n  * `tokens` {boolean} Return the parsed tokens. This is useful for extending\n    the built-in behavior, from adding additional checks through to reprocessing\n    the tokens in different ways.\n    **Default:** `false`.\n\n* Returns: {Object} The parsed command line arguments:\n  * `values` {Object} A mapping of parsed option names with their {string}\n    or {boolean} values.\n  * `positionals` {string\\[]} Positional arguments.\n  * `tokens` {Object\\[] | undefined} See [parseArgs tokens](#parseargs-tokens)\n    section. Only returned if `config` includes `tokens: true`.\n\nProvides a higher level API for command-line argument parsing than interacting\nwith `process.argv` directly. Takes a specification for the expected arguments\nand returns a structured object with the parsed options and positionals.\n\n```mjs\nimport { parseArgs } from 'node:util';\nconst args = ['-f', '--bar', 'b'];\nconst options = {\n  foo: {\n    type: 'boolean',\n    short: 'f'\n  },\n  bar: {\n    type: 'string'\n  }\n};\nconst {\n  values,\n  positionals\n} = parseArgs({ args, options });\nconsole.log(values, positionals);\n// Prints: [Object: null prototype] { foo: true, bar: 'b' } []\n```\n\n```cjs\nconst { parseArgs } = require('node:util');\nconst args = ['-f', '--bar', 'b'];\nconst options = {\n  foo: {\n    type: 'boolean',\n    short: 'f'\n  },\n  bar: {\n    type: 'string'\n  }\n};\nconst {\n  values,\n  positionals\n} = parseArgs({ args, options });\nconsole.log(values, positionals);\n// Prints: [Object: null prototype] { foo: true, bar: 'b' } []\n```\n\n`util.parseArgs` is experimental and behavior may change. Join the\nconversation in [pkgjs/parseargs][] to contribute to the design.\n\n### `parseArgs` `tokens`\n\nDetailed parse information is available for adding custom behaviours by\nspecifying `tokens: true` in the configuration.\nThe returned tokens have properties describing:\n\n* all tokens\n  * `kind` {string} One of 'option', 'positional', or 'option-terminator'.\n  * `index` {number} Index of element in `args` containing token. So the\n    source argument for a token is `args[token.index]`.\n* option tokens\n  * `name` {string} Long name of option.\n  * `rawName` {string} How option used in args, like `-f` of `--foo`.\n  * `value` {string | undefined} Option value specified in args.\n    Undefined for boolean options.\n  * `inlineValue` {boolean | undefined} Whether option value specified inline,\n    like `--foo=bar`.\n* positional tokens\n  * `value` {string} The value of the positional argument in args (i.e. `args[index]`).\n* option-terminator token\n\nThe returned tokens are in the order encountered in the input args. Options\nthat appear more than once in args produce a token for each use. Short option\ngroups like `-xy` expand to a token for each option. So `-xxx` produces\nthree tokens.\n\nFor example to use the returned tokens to add support for a negated option\nlike `--no-color`, the tokens can be reprocessed to change the value stored\nfor the negated option.\n\n```mjs\nimport { parseArgs } from 'node:util';\n\nconst options = {\n  'color': { type: 'boolean' },\n  'no-color': { type: 'boolean' },\n  'logfile': { type: 'string' },\n  'no-logfile': { type: 'boolean' },\n};\nconst { values, tokens } = parseArgs({ options, tokens: true });\n\n// Reprocess the option tokens and overwrite the returned values.\ntokens\n  .filter((token) => token.kind === 'option')\n  .forEach((token) => {\n    if (token.name.startsWith('no-')) {\n      // Store foo:false for --no-foo\n      const positiveName = token.name.slice(3);\n      values[positiveName] = false;\n      delete values[token.name];\n    } else {\n      // Resave value so last one wins if both --foo and --no-foo.\n      values[token.name] = token.value ?? true;\n    }\n  });\n\nconst color = values.color;\nconst logfile = values.logfile ?? 'default.log';\n\nconsole.log({ logfile, color });\n```\n\n```cjs\nconst { parseArgs } = require('node:util');\n\nconst options = {\n  'color': { type: 'boolean' },\n  'no-color': { type: 'boolean' },\n  'logfile': { type: 'string' },\n  'no-logfile': { type: 'boolean' },\n};\nconst { values, tokens } = parseArgs({ options, tokens: true });\n\n// Reprocess the option tokens and overwrite the returned values.\ntokens\n  .filter((token) => token.kind === 'option')\n  .forEach((token) => {\n    if (token.name.startsWith('no-')) {\n      // Store foo:false for --no-foo\n      const positiveName = token.name.slice(3);\n      values[positiveName] = false;\n      delete values[token.name];\n    } else {\n      // Resave value so last one wins if both --foo and --no-foo.\n      values[token.name] = token.value ?? true;\n    }\n  });\n\nconst color = values.color;\nconst logfile = values.logfile ?? 'default.log';\n\nconsole.log({ logfile, color });\n```\n\nExample usage showing negated options, and when an option is used\nmultiple ways then last one wins.\n\n```console\n$ node negate.js\n{ logfile: 'default.log', color: undefined }\n$ node negate.js --no-logfile --no-color\n{ logfile: false, color: false }\n$ node negate.js --logfile=test.log --color\n{ logfile: 'test.log', color: true }\n$ node negate.js --no-logfile --logfile=test.log --color --no-color\n{ logfile: 'test.log', color: false }\n```\n\n-----\n\n<!-- omit in toc -->\n## Table of Contents\n- [`util.parseArgs([config])`](#utilparseargsconfig)\n- [Scope](#scope)\n- [Version Matchups](#version-matchups)\n- [ðŸš€ Getting Started](#-getting-started)\n- [ðŸ™Œ Contributing](#-contributing)\n- [ðŸ’¡ `process.mainArgs` Proposal](#-processmainargs-proposal)\n  - [Implementation:](#implementation)\n- [ðŸ“ƒ Examples](#-examples)\n- [F.A.Qs](#faqs)\n- [Links & Resources](#links--resources)\n\n-----\n\n## Scope\n\nIt is already possible to build great arg parsing modules on top of what Node.js provides; the prickly API is abstracted away by these modules. Thus, process.parseArgs() is not necessarily intended for library authors; it is intended for developers of simple CLI tools, ad-hoc scripts, deployed Node.js applications, and learning materials.\n\nIt is exceedingly difficult to provide an API which would both be friendly to these Node.js users while being extensible enough for libraries to build upon. We chose to prioritize these use cases because these are currently not well-served by Node.js' API.\n\n----\n\n## Version Matchups\n\n| Node.js | @pkgjs/parseArgs |\n| -- | -- |\n| [v18.3.0](https://nodejs.org/docs/latest-v18.x/api/util.html#utilparseargsconfig) | [v0.9.1](https://github.com/pkgjs/parseargs/tree/v0.9.1#utilparseargsconfig) |\n| [v16.17.0](https://nodejs.org/dist/latest-v16.x/docs/api/util.html#utilparseargsconfig), [v18.7.0](https://nodejs.org/docs/latest-v18.x/api/util.html#utilparseargsconfig) | [0.10.0](https://github.com/pkgjs/parseargs/tree/v0.10.0#utilparseargsconfig) |\n\n----\n\n## ðŸš€ Getting Started\n\n1. **Install dependencies.**\n\n   ```bash\n   npm install\n   ```\n\n2. **Open the index.js file and start editing!**\n\n3. **Test your code by calling parseArgs through our test file**\n\n   ```bash\n   npm test\n   ```\n\n----\n\n## ðŸ™Œ Contributing\n\nAny person who wants to contribute to the initiative is welcome! Please first read the [Contributing Guide](CONTRIBUTING.md)\n\nAdditionally, reading the [`Examples w/ Output`](#-examples-w-output) section of this document will be the best way to familiarize yourself with the target expected behavior for parseArgs() once it is fully implemented.\n\nThis package was implemented using [tape](https://www.npmjs.com/package/tape) as its test harness.\n\n----\n\n## ðŸ’¡ `process.mainArgs` Proposal\n\n> Note: This can be moved forward independently of the `util.parseArgs()` proposal/work.\n\n### Implementation:\n\n```javascript\nprocess.mainArgs = process.argv.slice(process._exec ? 1 : 2)\n```\n\n----\n\n## ðŸ“ƒ Examples\n\n```js\nconst { parseArgs } = require('@pkgjs/parseargs');\n```\n\n```js\nconst { parseArgs } = require('@pkgjs/parseargs');\n// specify the options that may be used\nconst options = {\n  foo: { type: 'string'},\n  bar: { type: 'boolean' },\n};\nconst args = ['--foo=a', '--bar'];\nconst { values, positionals } = parseArgs({ args, options });\n// values = { foo: 'a', bar: true }\n// positionals = []\n```\n\n```js\nconst { parseArgs } = require('@pkgjs/parseargs');\n// type:string & multiple\nconst options = {\n  foo: {\n    type: 'string',\n    multiple: true,\n  },\n};\nconst args = ['--foo=a', '--foo', 'b'];\nconst { values, positionals } = parseArgs({ args, options });\n// values = { foo: [ 'a', 'b' ] }\n// positionals = []\n```\n\n```js\nconst { parseArgs } = require('@pkgjs/parseargs');\n// shorts\nconst options = {\n  foo: {\n    short: 'f',\n    type: 'boolean'\n  },\n};\nconst args = ['-f', 'b'];\nconst { values, positionals } = parseArgs({ args, options, allowPositionals: true });\n// values = { foo: true }\n// positionals = ['b']\n```\n\n```js\nconst { parseArgs } = require('@pkgjs/parseargs');\n// unconfigured\nconst options = {};\nconst args = ['-f', '--foo=a', '--bar', 'b'];\nconst { values, positionals } = parseArgs({ strict: false, args, options, allowPositionals: true });\n// values = { f: true, foo: 'a', bar: true }\n// positionals = ['b']\n```\n\n----\n\n## F.A.Qs\n\n- Is `cmd --foo=bar baz` the same as `cmd baz --foo=bar`?\n  - yes\n- Does the parser execute a function?\n  - no\n- Does the parser execute one of several functions, depending on input?\n  - no\n- Can subcommands take options that are distinct from the main command?\n  - no\n- Does it output generated help when no options match?\n  - no\n- Does it generated short usage?  Like: `usage: ls [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] [file ...]`\n  - no (no usage/help at all)\n- Does the user provide the long usage text?  For each option?  For the whole command?\n  - no\n- Do subcommands (if implemented) have their own usage output?\n  - no\n- Does usage print if the user runs `cmd --help`?\n  - no\n- Does it set `process.exitCode`?\n  - no\n- Does usage print to stderr or stdout?\n  - N/A\n- Does it check types?  (Say, specify that an option is a boolean, number, etc.)\n  - no\n- Can an option have more than one type?  (string or false, for example)\n  - no\n- Can the user define a type?  (Say, `type: path` to call `path.resolve()` on the argument.)\n  - no\n- Does a `--foo=0o22` mean 0, 22, 18, or \"0o22\"?\n  - `\"0o22\"`\n- Does it coerce types?\n  - no\n- Does `--no-foo` coerce to `--foo=false`?  For all options?  Only boolean options?\n  - no, it sets `{values:{'no-foo': true}}`\n- Is `--foo` the same as `--foo=true`?  Only for known booleans?  Only at the end?\n  - no, they are not the same. There is no special handling of `true` as a value so it is just another string.\n- Does it read environment variables?  Ie, is `FOO=1 cmd` the same as `cmd --foo=1`?\n  - no\n- Do unknown arguments raise an error?  Are they parsed?  Are they treated as positional arguments?\n  - no, they are parsed, not treated as positionals\n- Does `--` signal the end of options?\n  - yes\n- Is `--` included as a positional?\n  - no\n- Is `program -- foo` the same as `program foo`?\n  - yes, both store `{positionals:['foo']}`\n- Does the API specify whether a `--` was present/relevant?\n  - no\n- Is `-bar` the same as `--bar`?\n  - no, `-bar` is a short option or options, with expansion logic that follows the\n    [Utility Syntax Guidelines in POSIX.1-2017](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html). `-bar` expands to `-b`, `-a`, `-r`.\n- Is `---foo` the same as `--foo`?\n  - no\n  - the first is a long option named `'-foo'`\n  - the second is a long option named `'foo'`\n- Is `-` a positional? ie, `bash some-test.sh | tap -`\n  - yes\n\n## Links & Resources\n\n* [Initial Tooling Issue](https://github.com/nodejs/tooling/issues/19)\n* [Initial Proposal](https://github.com/nodejs/node/pull/35015)\n* [parseArgs Proposal](https://github.com/nodejs/node/pull/42675)\n\n[coverage-image]: https://img.shields.io/nycrc/pkgjs/parseargs\n[coverage-url]: https://github.com/pkgjs/parseargs/blob/main/.nycrc\n[pkgjs/parseargs]: https://github.com/pkgjs/parseargs\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@pkgjs/parseargs/-/parseargs-0.11.0.tgz#a77ea742fab25775145434eb1d2328cf5013ac33",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
    "hash": "a77ea742fab25775145434eb1d2328cf5013ac33",
    "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
    "registry": "npm",
    "packageName": "@pkgjs/parseargs",
    "cacheIntegrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg== sha1-p36nQvqyV3UUVDTrHSMoz1ATrDM="
  },
  "registry": "npm",
  "hash": "a77ea742fab25775145434eb1d2328cf5013ac33"
}