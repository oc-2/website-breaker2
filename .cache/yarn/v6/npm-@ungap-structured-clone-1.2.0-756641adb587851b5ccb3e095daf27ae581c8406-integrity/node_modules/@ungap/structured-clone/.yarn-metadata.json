{
  "manifest": {
    "name": "@ungap/structured-clone",
    "version": "1.2.0",
    "description": "A structuredClone polyfill",
    "main": "./cjs/index.js",
    "scripts": {
      "build": "npm run cjs && npm run rollup:json && npm run test",
      "cjs": "ascjs esm cjs",
      "coverage": "c8 report --reporter=text-lcov > ./coverage/lcov.info",
      "rollup:json": "rollup --config rollup/json.config.js",
      "test": "c8 node test/index.js"
    },
    "keywords": [
      "recursion",
      "structured",
      "clone",
      "algorithm"
    ],
    "author": {
      "name": "Andrea Giammarchi"
    },
    "license": "ISC",
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^15.0.2",
      "@rollup/plugin-terser": "^0.4.1",
      "ascjs": "^5.0.1",
      "c8": "^7.13.0",
      "coveralls": "^3.1.1",
      "rollup": "^3.21.4"
    },
    "module": "./esm/index.js",
    "type": "module",
    "exports": {
      ".": {
        "import": "./esm/index.js",
        "default": "./cjs/index.js"
      },
      "./json": {
        "import": "./esm/json.js",
        "default": "./cjs/json.js"
      },
      "./package.json": "./package.json"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ungap/structured-clone.git"
    },
    "bugs": {
      "url": "https://github.com/ungap/structured-clone/issues"
    },
    "homepage": "https://github.com/ungap/structured-clone#readme",
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@ungap-structured-clone-1.2.0-756641adb587851b5ccb3e095daf27ae581c8406-integrity/node_modules/@ungap/structured-clone/package.json",
    "readmeFilename": "README.md",
    "readme": "# structuredClone polyfill\n\n[![Downloads](https://img.shields.io/npm/dm/@ungap/structured-clone.svg)](https://www.npmjs.com/package/@ungap/structured-clone) [![build status](https://github.com/ungap/structured-clone/actions/workflows/node.js.yml/badge.svg)](https://github.com/ungap/structured-clone/actions) [![Coverage Status](https://coveralls.io/repos/github/ungap/structured-clone/badge.svg?branch=main)](https://coveralls.io/github/ungap/structured-clone?branch=main)\n\nAn env agnostic serializer and deserializer with recursion ability and types beyond *JSON* from the *HTML* standard itself.\n\n  * [Supported Types](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types)\n    * *not supported yet*: Blob, File, FileList, ImageBitmap, ImageData, and ArrayBuffer, but typed arrays are supported without major issues, but u/int8, u/int16, and u/int32 are the only safely suppored (right now).\n    * *not possible to implement*: the `{transfer: []}` option can be passed but it's completely ignored.\n  * [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone)\n  * [Serializer](https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal)\n  * [Deserializer](https://html.spec.whatwg.org/multipage/structured-data.html#structureddeserialize)\n\nSerialized values can be safely stringified as *JSON* too, and deserialization resurrect all values, even recursive, or more complex than what *JSON* allows.\n\n\n### Examples\n\nCheck the [100% test coverage](./test/index.js) to know even more.\n\n```js\n// as default export\nimport structuredClone from '@ungap/structured-clone';\nconst cloned = structuredClone({any: 'serializable'});\n\n// as independent serializer/deserializer\nimport {serialize, deserialize} from '@ungap/structured-clone';\n\n// the result can be stringified as JSON without issues\n// even if there is recursive data, bigint values,\n// typed arrays, and so on\nconst serialized = serialize({any: 'serializable'});\n\n// the result will be a replica of the original object\nconst deserialized = deserialize(serialized);\n```\n\n#### Global Polyfill\nNote: Only monkey patch the global if needed. This polyfill works just fine as an explicit import: `import structuredClone from \"@ungap/structured-clone\"`\n```js\n// Attach the polyfill as a Global function\nimport structuredClone from \"@ungap/structured-clone\";\nif (!(\"structuredClone\" in globalThis)) {\n  globalThis.structuredClone = structuredClone;\n}\n\n// Or don't monkey patch\nimport structuredClone from \"@ungap/structured-clone\"\n// Just use it in the file\nstructuredClone()\n```\n\n**Note**: Do not attach this module's default export directly to the global scope, whithout a conditional guard to detect a native implementation. In environments where there is a native global implementation of `structuredClone()` already, assignment to the global object will result in an infinite loop when `globalThis.structuredClone()` is called. See the example above for a safe way to provide the polyfill globally in your project.\n\n### Extra Features\n\nThere is no middle-ground between the structured clone algorithm and JSON:\n\n  * JSON is more relaxed about incompatible values: it just ignores these\n  * Structured clone is inflexible regarding incompatible values, yet it makes specialized instances impossible to reconstruct, plus it doesn't offer any helper, such as `toJSON()`, to make serialization possible, or better, with specific cases\n\nThis module specialized `serialize` export offers, within the optional extra argument, a **lossy** property to avoid throwing when incompatible types are found down the road (function, symbol, ...), so that it is possible to send with less worrying about thrown errors.\n\n```js\n// as default export\nimport structuredClone from '@ungap/structured-clone';\nconst cloned = structuredClone(\n  {\n    method() {\n      // ignored, won't be cloned\n    },\n    special: Symbol('also ignored')\n  },\n  {\n    // avoid throwing\n    lossy: true,\n    // avoid throwing *and* looks for toJSON\n    json: true\n  }\n);\n```\n\nThe behavior is the same found in *JSON* when it comes to *Array*, so that unsupported values will result as `null` placeholders instead.\n\n#### toJSON\n\nIf `lossy` option is not enough, `json` will actually enforce `lossy` and also check for `toJSON` method when objects are parsed.\n\nAlternative, the `json` exports combines all features:\n\n```js\nimport {stringify, parse} from '@ungap/structured-clone/json';\n\nparse(stringify({any: 'serializable'}));\n```\n",
    "licenseText": "ISC License\n\nCopyright (c) 2021, Andrea Giammarchi, @WebReflection\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\nOR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@ungap/structured-clone/-/structured-clone-1.2.0.tgz#756641adb587851b5ccb3e095daf27ae581c8406",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@ungap/structured-clone/-/structured-clone-1.2.0.tgz",
    "hash": "756641adb587851b5ccb3e095daf27ae581c8406",
    "integrity": "sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==",
    "registry": "npm",
    "packageName": "@ungap/structured-clone",
    "cacheIntegrity": "sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ== sha1-dWZBrbWHhRtcyz4JXa8nrlgchAY="
  },
  "registry": "npm",
  "hash": "756641adb587851b5ccb3e095daf27ae581c8406"
}