{
  "manifest": {
    "name": "@inquirer/checkbox",
    "version": "4.0.2",
    "description": "Inquirer checkbox prompt",
    "keywords": [
      "answer",
      "answers",
      "ask",
      "base",
      "cli",
      "command",
      "command-line",
      "confirm",
      "enquirer",
      "generate",
      "generator",
      "hyper",
      "input",
      "inquire",
      "inquirer",
      "interface",
      "iterm",
      "javascript",
      "menu",
      "node",
      "nodejs",
      "prompt",
      "promptly",
      "prompts",
      "question",
      "readline",
      "scaffold",
      "scaffolder",
      "scaffolding",
      "stdin",
      "stdout",
      "terminal",
      "tty",
      "ui",
      "yeoman",
      "yo",
      "zsh"
    ],
    "homepage": "https://github.com/SBoudrias/Inquirer.js/blob/main/packages/checkbox/README.md",
    "repository": {
      "type": "git",
      "url": "https://github.com/SBoudrias/Inquirer.js.git"
    },
    "license": "MIT",
    "author": {
      "name": "Simon Boudrias",
      "email": "admin@simonboudrias.com"
    },
    "sideEffects": false,
    "type": "module",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "import": {
          "types": "./dist/esm/index.d.ts",
          "default": "./dist/esm/index.js"
        },
        "require": {
          "types": "./dist/commonjs/index.d.ts",
          "default": "./dist/commonjs/index.js"
        }
      }
    },
    "main": "./dist/commonjs/index.js",
    "module": "./dist/esm/index.js",
    "types": "./dist/commonjs/index.d.ts",
    "files": [
      "dist"
    ],
    "scripts": {
      "attw": "attw --pack",
      "tsc": "tshy"
    },
    "dependencies": {
      "@inquirer/core": "^10.1.0",
      "@inquirer/figures": "^1.0.8",
      "@inquirer/type": "^3.0.1",
      "ansi-escapes": "^4.3.2",
      "yoctocolors-cjs": "^2.1.2"
    },
    "devDependencies": {
      "@arethetypeswrong/cli": "^0.17.0",
      "@inquirer/testing": "^2.1.37",
      "@repo/tsconfig": "workspace:*",
      "tshy": "^3.0.2"
    },
    "engines": {
      "node": ">=18"
    },
    "publishConfig": {
      "access": "public"
    },
    "tshy": {
      "exclude": [
        "src/**/*.test.ts"
      ],
      "exports": {
        "./package.json": "./package.json",
        ".": "./src/index.ts"
      }
    },
    "peerDependencies": {
      "@types/node": ">=18"
    },
    "gitHead": "84e49bdb552e1cb4f035d644190913f367a66e74",
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@inquirer-checkbox-4.0.2-e45e0ad2611f2cb2d337ba36c7d955b53f195914-integrity/node_modules/@inquirer/checkbox/package.json",
    "readmeFilename": "README.md",
    "readme": "# `@inquirer/checkbox`\n\nSimple interactive command line prompt to display a list of checkboxes (multi select).\n\n![Checkbox prompt](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/checkbox.svg)\n\n# Installation\n\n<table>\n<tr>\n  <th>npm</th>\n  <th>yarn</th>\n</tr>\n<tr>\n<td>\n\n```sh\nnpm install @inquirer/prompts\n```\n\n</td>\n<td>\n\n```sh\nyarn add @inquirer/prompts\n```\n\n</td>\n</tr>\n<tr>\n<td colSpan=\"2\" align=\"center\">Or</td>\n</tr>\n<tr>\n<td>\n\n```sh\nnpm install @inquirer/checkbox\n```\n\n</td>\n<td>\n\n```sh\nyarn add @inquirer/checkbox\n```\n\n</td>\n</tr>\n</table>\n\n# Usage\n\n```js\nimport { checkbox, Separator } from '@inquirer/prompts';\n// Or\n// import checkbox, { Separator } from '@inquirer/checkbox';\n\nconst answer = await checkbox({\n  message: 'Select a package manager',\n  choices: [\n    { name: 'npm', value: 'npm' },\n    { name: 'yarn', value: 'yarn' },\n    new Separator(),\n    { name: 'pnpm', value: 'pnpm', disabled: true },\n    {\n      name: 'pnpm',\n      value: 'pnpm',\n      disabled: '(pnpm is not available)',\n    },\n  ],\n});\n```\n\n## Options\n\n| Property | Type                                    | Required | Description                                                                                                                                                                                           |\n| -------- | --------------------------------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| message  | `string`                                | yes      | The question to ask                                                                                                                                                                                   |\n| choices  | `Choice[]`                              | yes      | List of the available choices.                                                                                                                                                                        |\n| pageSize | `number`                                | no       | By default, lists of choice longer than 7 will be paginated. Use this option to control how many choices will appear on the screen at once.                                                           |\n| loop     | `boolean`                               | no       | Defaults to `true`. When set to `false`, the cursor will be constrained to the top and bottom of the choice list without looping.                                                                     |\n| required | `boolean`                               | no       | When set to `true`, ensures at least one choice must be selected.                                                                                                                                     |\n| validate | `async (Choice[]) => boolean \\| string` | no       | On submit, validate the choices. When returning a string, it'll be used as the error message displayed to the user. Note: returning a rejected promise, we'll assume a code error happened and crash. |\n| theme    | [See Theming](#Theming)                 | no       | Customize look of the prompt.                                                                                                                                                                         |\n\n`Separator` objects can be used in the `choices` array to render non-selectable lines in the choice list. By default it'll render a line, but you can provide the text as argument (`new Separator('-- Dependencies --')`). This option is often used to add labels to groups within long list of options.\n\n### `Choice` object\n\nThe `Choice` object is typed as\n\n```ts\ntype Choice<Value> = {\n  value: Value;\n  name?: string;\n  description?: string;\n  short?: string;\n  checked?: boolean;\n  disabled?: boolean | string;\n};\n```\n\nHere's each property:\n\n- `value`: The value is what will be returned by `await checkbox()`.\n- `name`: This is the string displayed in the choice list.\n- `description`: Option for a longer description string that'll appear under the list when the cursor highlight a given choice.\n- `short`: Once the prompt is done (press enter), we'll use `short` if defined to render next to the question. By default we'll use `name`.\n- `checked`: If `true`, the option will be checked by default.\n- `disabled`: Disallow the option from being selected. If `disabled` is a string, it'll be used as a help tip explaining why the choice isn't available.\n\nAlso note the `choices` array can contain `Separator`s to help organize long lists.\n\n`choices` can also be an array of string, in which case the string will be used both as the `value` and the `name`.\n\n## Theming\n\nYou can theme a prompt by passing a `theme` object option. The theme object only need to includes the keys you wish to modify, we'll fallback on the defaults for the rest.\n\n```ts\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    defaultAnswer: (text: string) => string;\n    help: (text: string) => string;\n    highlight: (text: string) => string;\n    key: (text: string) => string;\n    disabledChoice: (text: string) => string;\n    description: (text: string) => string;\n    renderSelectedChoices: <T>(\n      selectedChoices: ReadonlyArray<Choice<T>>,\n      allChoices: ReadonlyArray<Choice<T> | Separator>,\n    ) => string;\n  };\n  icon: {\n    checked: string;\n    unchecked: string;\n    cursor: string;\n  };\n  helpMode: 'always' | 'never' | 'auto';\n};\n```\n\n### `theme.helpMode`\n\n- `auto` (default): Hide the help tips after an interaction occurs. The scroll tip will hide after any interactions, the selection tip will hide as soon as a first selection is done.\n- `always`: The help tips will always show and never hide.\n- `never`: The help tips will never show.\n\n# License\n\nCopyright (c) 2023 Simon Boudrias (twitter: [@vaxilart](https://twitter.com/Vaxilart))<br/>\nLicensed under the MIT license.\n",
    "licenseText": "Copyright (c) 2023 Simon Boudrias\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@inquirer/checkbox/-/checkbox-4.0.2.tgz#e45e0ad2611f2cb2d337ba36c7d955b53f195914",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@inquirer/checkbox/-/checkbox-4.0.2.tgz",
    "hash": "e45e0ad2611f2cb2d337ba36c7d955b53f195914",
    "integrity": "sha512-+gznPl8ip8P8HYHYecDtUtdsh1t2jvb+sWCD72GAiZ9m45RqwrLmReDaqdC0umQfamtFXVRoMVJ2/qINKGm9Tg==",
    "registry": "npm",
    "packageName": "@inquirer/checkbox",
    "cacheIntegrity": "sha512-+gznPl8ip8P8HYHYecDtUtdsh1t2jvb+sWCD72GAiZ9m45RqwrLmReDaqdC0umQfamtFXVRoMVJ2/qINKGm9Tg== sha1-5F4K0mEfLLLTN7o2x9lVtT8ZWRQ="
  },
  "registry": "npm",
  "hash": "e45e0ad2611f2cb2d337ba36c7d955b53f195914"
}