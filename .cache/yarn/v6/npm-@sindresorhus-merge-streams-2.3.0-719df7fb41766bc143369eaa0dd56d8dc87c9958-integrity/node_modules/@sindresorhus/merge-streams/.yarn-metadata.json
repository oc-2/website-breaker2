{
  "manifest": {
    "name": "@sindresorhus/merge-streams",
    "version": "2.3.0",
    "description": "Merge multiple streams into a unified stream",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/merge-streams.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "type": "module",
    "exports": {
      "types": "./index.d.ts",
      "default": "./index.js"
    },
    "sideEffects": false,
    "engines": {
      "node": ">=18"
    },
    "scripts": {
      "test": "xo && c8 ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "merge",
      "stream",
      "streams",
      "readable",
      "passthrough",
      "interleave",
      "interleaved",
      "unify",
      "unified"
    ],
    "devDependencies": {
      "@types/node": "^20.8.9",
      "ava": "^6.1.0",
      "c8": "^9.1.0",
      "tempfile": "^5.0.0",
      "tsd": "^0.30.4",
      "typescript": "^5.2.2",
      "xo": "^0.56.0"
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@sindresorhus-merge-streams-2.3.0-719df7fb41766bc143369eaa0dd56d8dc87c9958-integrity/node_modules/@sindresorhus/merge-streams/package.json",
    "readmeFilename": "readme.md",
    "readme": "# merge-streams\n\n> Merge multiple streams into a unified stream\n\n## Install\n\n```sh\nnpm install @sindresorhus/merge-streams\n```\n\n## Usage\n\n```js\nimport mergeStreams from '@sindresorhus/merge-streams';\n\nconst stream = mergeStreams([streamA, streamB]);\n\nfor await (const chunk of stream) {\n\tconsole.log(chunk);\n\t//=> 'A1'\n\t//=> 'B1'\n\t//=> 'A2'\n\t//=> 'B2'\n}\n```\n\n## API\n\n### `mergeStreams(streams: stream.Readable[]): MergedStream`\n\nMerges an array of [readable streams](https://nodejs.org/api/stream.html#readable-streams) and returns a new readable stream that emits data from the individual streams as it arrives.\n\nIf you provide an empty array, it returns an already-ended stream.\n\n#### `MergedStream`\n\n_Type_: `stream.Readable`\n\nA single stream combining the output of multiple streams.\n\n##### `MergedStream.add(stream: stream.Readable): void`\n\nPipe a new readable stream.\n\nThrows if `MergedStream` has already ended.\n\n##### `MergedStream.remove(stream: stream.Readable): boolean`\n\nUnpipe a stream previously added using either [`mergeStreams(streams)`](#mergestreamsstreams-streamreadable-mergedstream) or [`MergedStream.add(stream)`](#mergedstreamaddstream-streamreadable-void).\n\nReturns `false` if the stream was not previously added, or if it was already removed by `MergedStream.remove(stream)`.\n\nThe removed stream is not automatically ended.\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@sindresorhus/merge-streams/-/merge-streams-2.3.0.tgz#719df7fb41766bc143369eaa0dd56d8dc87c9958",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@sindresorhus/merge-streams/-/merge-streams-2.3.0.tgz",
    "hash": "719df7fb41766bc143369eaa0dd56d8dc87c9958",
    "integrity": "sha512-LtoMMhxAlorcGhmFYI+LhPgbPZCkgP6ra1YL604EeF6U98pLlQ3iWIGMdWSC+vWmPBWBNgmDBAhnAobLROJmwg==",
    "registry": "npm",
    "packageName": "@sindresorhus/merge-streams",
    "cacheIntegrity": "sha512-LtoMMhxAlorcGhmFYI+LhPgbPZCkgP6ra1YL604EeF6U98pLlQ3iWIGMdWSC+vWmPBWBNgmDBAhnAobLROJmwg== sha1-cZ33+0F2a8FDNp6qDdVtjch8mVg="
  },
  "registry": "npm",
  "hash": "719df7fb41766bc143369eaa0dd56d8dc87c9958"
}