{
  "manifest": {
    "author": {
      "name": "Jamison Dance",
      "email": "jergason@gmail.com",
      "url": "http://jamison.dance.com/"
    },
    "name": "recursive-readdir",
    "description": "Get an array of all files in a directory and subdirectories.",
    "license": "MIT",
    "version": "2.2.3",
    "repository": {
      "type": "git",
      "url": "git://github.com/jergason/recursive-readdir.git"
    },
    "main": "./index.js",
    "files": [
      "index.js"
    ],
    "scripts": {
      "test": "mocha test/"
    },
    "keywords": [
      "directory",
      "lister"
    ],
    "engines": {
      "node": ">=6.0.0"
    },
    "dependencies": {
      "minimatch": "^3.0.5"
    },
    "devDependencies": {
      "mocha": "6.1.4"
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-recursive-readdir-2.2.3-e726f328c0d69153bcabd5c322d3195252379372-integrity/node_modules/recursive-readdir/package.json",
    "readmeFilename": "README.md",
    "readme": "# recursive-readdir\n\n[![Build Status](https://travis-ci.org/jergason/recursive-readdir.svg?branch=master)](https://travis-ci.org/jergason/recursive-readdir)\n\nRecursively list all files in a directory and its subdirectories. It does not list the directories themselves.\n\nBecause it uses fs.readdir, which calls [readdir](http://linux.die.net/man/3/readdir) under the hood\non OS X and Linux, the order of files inside directories is [not guaranteed](http://stackoverflow.com/questions/8977441/does-readdir-guarantee-an-order).\n\n## Installation\n\n    npm install recursive-readdir\n\n## Usage\n\n```javascript\nvar recursive = require(\"recursive-readdir\");\n\nrecursive(\"some/path\", function (err, files) {\n  // `files` is an array of file paths\n  console.log(files);\n});\n```\n\nIt can also take a list of files to ignore.\n\n```javascript\nvar recursive = require(\"recursive-readdir\");\n\n// ignore files named \"foo.cs\" or files that end in \".html\".\nrecursive(\"some/path\", [\"foo.cs\", \"*.html\"], function (err, files) {\n  console.log(files);\n});\n```\n\nYou can also pass functions which are called to determine whether or not to\nignore a file:\n\n```javascript\nvar recursive = require(\"recursive-readdir\");\n\nfunction ignoreFunc(file, stats) {\n  // `file` is the path to the file, and `stats` is an `fs.Stats`\n  // object returned from `fs.lstat()`.\n  return stats.isDirectory() && path.basename(file) == \"test\";\n}\n\n// Ignore files named \"foo.cs\" and descendants of directories named test\nrecursive(\"some/path\", [\"foo.cs\", ignoreFunc], function (err, files) {\n  console.log(files);\n});\n```\n\n## Promises\nYou can omit the callback and return a promise instead.\n\n```javascript\nvar recursive = require(\"recursive-readdir\");\n\nrecursive(\"some/path\").then(\n  function(files) {\n    console.log(\"files are\", files);\n  },\n  function(error) {\n    console.error(\"something exploded\", error);\n  }\n);\n```\n\nThe ignore strings support Glob syntax via\n[minimatch](https://github.com/isaacs/minimatch).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/recursive-readdir/-/recursive-readdir-2.2.3.tgz#e726f328c0d69153bcabd5c322d3195252379372",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/recursive-readdir/-/recursive-readdir-2.2.3.tgz",
    "hash": "e726f328c0d69153bcabd5c322d3195252379372",
    "integrity": "sha512-8HrF5ZsXk5FAH9dgsx3BlUer73nIhuj+9OrQwEbLTPOBzGkL1lsFCR01am+v+0m2Cmbs1nP12hLDl5FA7EszKA==",
    "registry": "npm",
    "packageName": "recursive-readdir",
    "cacheIntegrity": "sha512-8HrF5ZsXk5FAH9dgsx3BlUer73nIhuj+9OrQwEbLTPOBzGkL1lsFCR01am+v+0m2Cmbs1nP12hLDl5FA7EszKA== sha1-5ybzKMDWkVO8q9XDItMZUlI3k3I="
  },
  "registry": "npm",
  "hash": "e726f328c0d69153bcabd5c322d3195252379372"
}