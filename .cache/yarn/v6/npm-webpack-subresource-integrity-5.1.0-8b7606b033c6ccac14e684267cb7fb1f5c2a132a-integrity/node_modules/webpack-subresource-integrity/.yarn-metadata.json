{
  "manifest": {
    "name": "webpack-subresource-integrity",
    "version": "5.1.0",
    "description": "Webpack plugin for enabling Subresource Integrity",
    "author": {
      "name": "Julian Scheid",
      "email": "julian@evergiving.com"
    },
    "license": "MIT",
    "homepage": "https://github.com/waysact/webpack-subresource-integrity/tree/main/webpack-subresource-integrity#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/waysact/webpack-subresource-integrity.git"
    },
    "bugs": {
      "url": "https://github.com/waysact/webpack-subresource-integrity/issues"
    },
    "keywords": [
      "webpack",
      "plugin",
      "sri",
      "subresource",
      "integrity",
      "html-webpack-plugin"
    ],
    "main": "./index.js",
    "types": "./webpack-subresource-integrity-public.d.ts",
    "engines": {
      "node": ">= 12"
    },
    "dependencies": {
      "typed-assert": "^1.0.8"
    },
    "peerDependencies": {
      "html-webpack-plugin": ">= 5.0.0-beta.1 < 6",
      "webpack": "^5.12.0"
    },
    "peerDependenciesMeta": {
      "html-webpack-plugin": {
        "optional": true
      }
    },
    "devDependencies": {
      "@microsoft/api-extractor": "^7.18.1",
      "@tsconfig/node12": "^1.0.9",
      "@types/cross-spawn": "^6.0.2",
      "@types/jest": "^26.0.24",
      "@types/json-schema": "^7.0.8",
      "@types/lodash": "^4.14.171",
      "@types/node": "^14.17.5",
      "@types/rimraf": "^3.0.1",
      "@types/tmp": "^0.2.1",
      "@typescript-eslint/eslint-plugin": "4.28.2",
      "@typescript-eslint/parser": "^4.28.2",
      "cross-spawn": "^7.0.3",
      "eslint": "^7.30.0",
      "eslint-config-prettier": "^6.15.0",
      "eslint-plugin-import": "2.23.4",
      "eslint-plugin-jest": "^24.3.6",
      "eslint-plugin-node": "11.1.0",
      "eslint-plugin-prettier": "^3.4.0",
      "eslint-plugin-promise": "4.3.1",
      "eslint-plugin-standard": "4.1.0",
      "html-webpack-plugin": ">= 5.0.0-beta.1",
      "jest": "^26.6.3",
      "lodash": "^4.17.21",
      "memfs": "^3.2.0",
      "nyc": "*",
      "prettier": "^2.3.2",
      "rimraf": "^3.0.2",
      "tapable": "^2.2.0",
      "tmp": "^0.2.1",
      "tmp-promise": "^3.0.2",
      "ts-jest": "^26.5.6",
      "typescript": "^4.3.5",
      "webpack": "^5.44.0"
    },
    "scripts": {
      "prepublish": "tsc && api-extractor run --local"
    },
    "files": [
      "/index.js",
      "/index.js.map",
      "/plugin.js",
      "/plugin.js.map",
      "/reporter.js",
      "/reporter.js.map",
      "/util.js",
      "/util.js.map",
      "/types.js",
      "/types.js.map",
      "/webpack-subresource-integrity-public.d.ts",
      "/tsdoc-metadata.json",
      "/README.md",
      "/LICENSE"
    ],
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-webpack-subresource-integrity-5.1.0-8b7606b033c6ccac14e684267cb7fb1f5c2a132a-integrity/node_modules/webpack-subresource-integrity/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status][tests-badge]][tests-url]\n[![Coverage Status][coverage-badge]][coverage-url]\n[![Code Climate][codeclimate-badge]][codeclimate-url]\n[![License][license-badge]][license-url]\n\n# webpack-subresource-integrity\n\nWebpack plugin for enabling Subresource Integrity.\n\n[Subresource Integrity](http://www.w3.org/TR/SRI/) (SRI) is a security\nfeature that enables browsers to verify that files they fetch (for\nexample, from a CDN) are delivered without unexpected\nmanipulation.\n\n**Upgrading from version 1.x? [Read the migration guide](https://github.com/waysact/webpack-subresource-integrity/blob/main/MIGRATE-v1-to-v5.md).**\n\n## Features\n\n- Optional integration with [html-webpack-plugin](https://github.com/ampedandwired/html-webpack-plugin).\n- Automatic support for dynamic imports (also known as code splitting.)\n- Compatible with Webpack 5 (for Webpack versions 1-4 see [1.x branch](https://github.com/waysact/webpack-subresource-integrity/tree/1.x/).)\n\n## Installation\n\n```shell\nyarn add --dev webpack-subresource-integrity\n```\n\n```shell\nnpm install webpack-subresource-integrity --save-dev\n```\n\n### Recommended Webpack Configuration\n\n```javascript\nimport { SubresourceIntegrityPlugin } from \"webpack-subresource-integrity\";\n// or: const { SubresourceIntegrityPlugin } = require('webpack-subresource-integrity');\n\nconst compiler = webpack({\n  output: {\n    // the following setting is required for SRI to work:\n    crossOriginLoading: \"anonymous\",\n  },\n  plugins: [new SubresourceIntegrityPlugin()],\n});\n```\n\n### Setting the `integrity` attribute for top-level assets\n\nFor the plugin to take effect it is **essential** that you set the\n`integrity` attribute for top-level assets (i.e. assets loaded by your\nHTML pages.)\n\n#### With HtmlWebpackPlugin\n\nWhen html-webpack-plugin is injecting assets into the template (the\ndefault), the `integrity` attribute will be set automatically. The\n`crossorigin` attribute will be set as well, to the value of\n`output.crossOriginLoading` webpack option. There is nothing else to\nbe done.\n\n#### With HtmlWebpackPlugin({ inject: false })\n\nWhen you use html-webpack-plugin with `inject: false`, you are\nrequired to set the `integrity` and `crossorigin` attributes in your\ntemplate as follows:\n\n```ejs\n<% for (let index in htmlWebpackPlugin.files.js) { %>\n  <script\n     src=\"<%= htmlWebpackPlugin.files.js[index] %>\"\n     integrity=\"<%= htmlWebpackPlugin.files.jsIntegrity[index] %>\"\n     crossorigin=\"<%= webpackConfig.output.crossOriginLoading %>\"\n  ></script>\n<% } %>\n\n<% for (let index in htmlWebpackPlugin.files.css) { %>\n  <link\n     rel=\"stylesheet\"\n     href=\"<%= htmlWebpackPlugin.files.css[index] %>\"\n     integrity=\"<%= htmlWebpackPlugin.files.cssIntegrity[index] %>\"\n     crossorigin=\"<%= webpackConfig.output.crossOriginLoading %>\"\n  />\n<% } %>\n```\n\n#### Without HtmlWebpackPlugin\n\nThe correct value for the `integrity` attribute can be retrieved from\nthe `integrity` property of Webpack assets. For example:\n\n```javascript\ncompiler.plugin(\"done\", (stats) => {\n  const integrityValues = stats\n    .toJson()\n    .assets.map((asset) => [asset.name, asset.integrity]);\n});\n```\n\nNote that when you add the `integrity` attribute on your `link` and\n`script` tags, you're also required to set the `crossorigin`\nattribute. It is recommended to set this attribute to the same value\nas the webpack `output.crossOriginLoading` configuration option.\n\n### Web Server Configuration\n\nIf your page can be loaded through plain HTTP (as opposed to HTTPS),\nyou must set the `Cache-Control: no-transform` response header or your\npage will break when assets are loaded through a transforming\nproxy. [See below](#proxies) for more information.\n\nWhen using caching, stale assets will fail to load since they will not pass\nintegrity checks. It is vital that you configure caching correctly in your web\nserver. [See below](#caching) for more information.\n\n### Options\n\n#### hashFuncNames\n\nDefault value: `[\"sha384\"]`\n\nAn array of strings, each specifying the name of a hash function to be\nused for calculating integrity hash values.\n\nSee [SRI: Cryptographic hash functions](http://www.w3.org/TR/SRI/#cryptographic-hash-functions)\n\nThe default is chosen based on the current [suggestion by the\nW3C](https://www.w3.org/TR/2016/REC-SRI-20160623/#hash-collision-attacks) which\nreads:\n\n> At the time of writing, SHA-384 is a good baseline.\n\nSee [here](https://github.com/w3c/webappsec/issues/477) for additional\ninformation on why SHA-384 was chosen by the W3C over their initial suggestion,\nSHA-256.\n\nAs one of the commenters in that discussion points out, \"SRI hashes are likely\ndelivered over SSL\" which today (2021) is often using SHA-256 so that there is\nprobably little harm in downgrading this to `sha256` instead.\n\nBy using SHA-256 you will save 21 bytes per chunk and perhaps a few CPU cycles,\nalthough SHA-384 is actually faster to compute on some hardware. Not that it\nmatters, as the difference is dwarfed by all the other work a browser has to do\nin order to download and parse a JS or CSS asset.\n\nYou probably want to use `sha512` instead of the default only if you're\nparanoid. It will cost you an additional 21 bytes per chunk; the CPU overhead is\nvirtually nil because SHA-512 is the same as SHA-384, just not truncated.\n\nAlthough you can specify multiple hash functions here, doing so is pointless as\nlong as all mainstream browsers only support the SHA-2 family, which is the case\ntoday. Worse, it's detrimental since it adds unnecessary overhead.\n\nThe reason is that as per the spec, only the strongest hash function is used and\nso eg. `['sha256', 'sha512']` is equivalent to `['sha512']` unless SHA-512 was\none day deemed _weaker_ than SHA-256 by user agents, which is an unlikely\nscenario. As one of the authors of the W3C spec [puts\nit](https://github.com/mozilla/srihash.org/issues/155#issuecomment-259800503):\n\n> The support for multiple hashes is in the spec for backward-compatibility once\n> we introduce new hash algorithms (e.g. SHA3).\n\n#### enabled\n\nDefault value: `\"auto\"`\n\nOne of `\"auto\"`, `true`, or `false`.\n\n`true` means to enable the plugin and `false` means to disable it.\n\n`auto` is the default and means to enable the plugin when the [Webpack\nmode](https://webpack.js.org/configuration/mode/) is `production` or\n`none` and disable it when it is `development`.\n\n#### hashLoading\n\nDefault value: `\"eager\"`\n\nOne of `\"eager\"` or `\"lazy\"`\n\n`\"eager\"\"` means that integrity hashes for all assets will be defined in the entry chunk.\n\n`\"lazy\"` means that integrity hashes for any given asset will be defined in its direct parents \nin the chunk graph. This can lead to duplication of hashes across assets, but can significantly\nreduce the size of your entry chunk(s) if you have a large number of async chunks.\n\n## Exporting `integrity` values\n\nYou might want to export generated integrity hashes, perhaps for use\nwith SSR. We recommend\n[webpack-assets-manifest](https://github.com/webdeveric/webpack-assets-manifest)\nfor this purpose. When configured with option `integrity: true` it\nwill include the hashes generated by this plugin in the manifest.\n\n[Example usage with webpack-assets-manifest](https://github.com/waysact/webpack-subresource-integrity/tree/main/examples/webpack-assets-manifest/).\n\n## Caveats\n\n### Caching\n\nUsing SRI presents a potential risk to the availability of your website when\nHTTP response caching is setup incorrectly. Stale asset versions are always\nproblematic but SRI exacerbates the risk.\n\nWithout SRI, inconsequential changes (such as whitespace-only changes) don't\nmatter, and your website might still look OK when a stale CSS asset is used.\nEven with a stale JS asset there's a chance your website will still be more or\nless working as expected.\n\nWith SRI, however, a stale asset will fail hard. This is because the browser\nwon't tell the difference between a version of your asset that has been tampered\nwith and one that is simply outdated: both will fail the integrity check and\nrefuse to load.\n\nIt's therefore imperative that, if you do use caching, you use a robust setup:\none where _any_ change in content, no matter how miniscule or inconsequential,\nwill cause the cache to be invalidated.\n\nWith Webpack and long-term caching this means using `[contenthash]` (with\n`realContentHash`, which is enabled by default in production mode). Using\n`[contenthash]` with `realContentHash` disabled, or using a different type of\nhash placeholder (such as `[chunkhash]`) provides weaker guarantees, which is\nwhy this plugin will output a warning in these cases. See [issue\n#162](https://github.com/waysact/webpack-subresource-integrity/issues/162)\nfor more information.\n\n### Proxies\n\nBy its very nature, SRI can cause your page to break when assets are\nmodified by a proxy. This is because SRI doesn't distinguish between\nmalicious and benevolent modifications: any modification will prevent\nan asset from being loaded.\n\nNotably, this issue can arise when your page is loaded through\n[Chrome Data Saver](https://developer.chrome.com/multidevice/data-compression).\n\nThis is only a problem when your page can be loaded with plain HTTP,\nsince proxies are incapable of modifying encrypted HTTPS responses.\n\nPresumably, you're looking to use SRI because you're concerned about\nsecurity and thus your page is only served through HTTPS anyway.\nHowever, if you really need to use SRI and HTTP together, you should\nset the `Cache-Control: no-transform` response header. This will\ninstruct all well-behaved proxies (including Chrome Data Saver) to\nrefrain from modifying the assets.\n\n### Preloading\n\nThis plugin adds the integrity attribute to `<link rel=\"preload\">`\ntags, but preloading with SRI doesn't work as expected in current\nChrome versions. The resource will be loaded twice, defeating the\npurpose of preloading. This problem doesn't appear to exist in\nFirefox or Safari. See [issue\n#111](https://github.com/waysact/webpack-subresource-integrity/issues/111)\nfor more information.\n\n### Browser support\n\nBrowser support for SRI is widely implemented. Your page will still\nwork on browsers without support for SRI, but subresources won't be\nprotected from tampering.\n\nSee [Can I use Subresource Integrity?](http://caniuse.com/#feat=subresource-integrity)\n\n### Hot Reloading\n\nThis plugin can interfere with hot reloading and therefore should be\ndisabled when using tools such as `webpack-dev-server`. This shouldn't\nbe a problem because hot reloading is usually used only in development\nmode where SRI is not normally needed.\n\nFor testing SRI without setting up a full-blown web server, consider\nusing a tool such as [`http-server`](https://github.com/indexzero/http-server).\n\n### Safari and Assets that Require Cookies\n\nAs detailed in\n[Webpack Issue #6972](https://github.com/webpack/webpack/issues/6972),\nthe `crossOrigin` attribute can break loading of assets in certain\nedge cases due to a bug in Safari. Since SRI requires the\n`crossOrigin` attribute to be set, you may run into this case even\nwhen source URL is same-origin with respect to the asset.\n\n## Further Reading\n\n- [MDN: Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)\n\n## License\n\nCopyright (c) 2015-present Waysact Pty Ltd\n\nMIT (see [LICENSE](LICENSE))\n\n[tests-badge]: https://github.com/waysact/webpack-subresource-integrity/actions/workflows/test.yml/badge.svg?branch=main\n[tests-url]: https://github.com/waysact/webpack-subresource-integrity/actions\n[coverage-badge]: https://coveralls.io/repos/github/waysact/webpack-subresource-integrity/badge.svg?branch=main\n[coverage-url]: https://coveralls.io/github/waysact/webpack-subresource-integrity?branch=main\n[codeclimate-badge]: https://codeclimate.com/github/waysact/webpack-subresource-integrity/badges/gpa.svg\n[codeclimate-url]: https://codeclimate.com/github/waysact/webpack-subresource-integrity\n[license-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[license-url]: https://raw.githubusercontent.com/waysact/webpack-subresource-integrity/main/LICENSE\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2015-present Waysact Pty Ltd\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/webpack-subresource-integrity/-/webpack-subresource-integrity-5.1.0.tgz#8b7606b033c6ccac14e684267cb7fb1f5c2a132a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/webpack-subresource-integrity/-/webpack-subresource-integrity-5.1.0.tgz",
    "hash": "8b7606b033c6ccac14e684267cb7fb1f5c2a132a",
    "integrity": "sha512-sacXoX+xd8r4WKsy9MvH/q/vBtEHr86cpImXwyg74pFIpERKt6FmB8cXpeuh0ZLgclOlHI4Wcll7+R5L02xk9Q==",
    "registry": "npm",
    "packageName": "webpack-subresource-integrity",
    "cacheIntegrity": "sha512-sacXoX+xd8r4WKsy9MvH/q/vBtEHr86cpImXwyg74pFIpERKt6FmB8cXpeuh0ZLgclOlHI4Wcll7+R5L02xk9Q== sha1-i3YGsDPGzKwU5oQmfLf7H1wqEyo="
  },
  "registry": "npm",
  "hash": "8b7606b033c6ccac14e684267cb7fb1f5c2a132a"
}