{
  "manifest": {
    "name": "@rushstack/eslint-patch",
    "version": "1.10.4",
    "description": "Enhance ESLint with better support for large scale monorepos",
    "main": "lib/usage.js",
    "license": "MIT",
    "repository": {
      "url": "https://github.com/microsoft/rushstack.git",
      "type": "git",
      "directory": "eslint/eslint-patch"
    },
    "homepage": "https://rushstack.io/",
    "keywords": [
      "eslintrc",
      "config",
      "module",
      "resolve",
      "resolver",
      "plugin",
      "relative",
      "package",
      "bulk",
      "suppressions",
      "monorepo",
      "monkey",
      "patch"
    ],
    "devDependencies": {
      "@rushstack/heft": "0.66.17",
      "@rushstack/heft-node-rig": "2.6.15",
      "@types/eslint": "8.2.0",
      "@types/node": "18.17.15",
      "@typescript-eslint/types": "~5.59.2",
      "eslint": "~8.57.0",
      "eslint-plugin-header": "~3.1.1",
      "typescript": "~5.4.2"
    },
    "scripts": {
      "build": "heft build --clean",
      "_phase:build": "heft run --only build -- --clean"
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-@rushstack-eslint-patch-1.10.4-427d5549943a9c6fce808e39ea64dbe60d4047f1-integrity/node_modules/@rushstack/eslint-patch/package.json",
    "readmeFilename": "README.md",
    "readme": "# @rushstack/eslint-patch\n\nEnhance [ESLint](https://eslint.org/) with better support for large scale monorepos!\n\nThis is a runtime patch that enables new/experimental features for ESLint.  It operates as a \"monkey patch\"\nthat gets loaded with **.eslintrc.js** and modifies the ESLint engine in memory.  This approach works\nwith your existing ESLint version (no need to install a forked ESLint), and is fully interoperable with\ncompanion tools such as the ESLint extensions for VS Code and WebStorm.\n\nThis package provides several independently loadable features:\n\n- **eslint-bulk-suppressions**: enables you to roll out new lint rules in your monorepo without having to\n  clutter up source files with thousands of machine-generated `// eslint-ignore-next-line` directives.\n  Instead, the \"bulk suppressions\" for legacy violations are managed in a separate file called\n  **.eslint-bulk-suppressions.json**.\n\n- **modern-module-resolution**: allows an ESLint config package to provide plugin dependencies, avoiding the\n  problem where hundreds of projects in a monorepo need to copy+paste the same `\"devDependencies\"` in\n  every **package.json** file.\n\n  > **NOTE:** ESLint 8.21.0 has now introduced a new `ESLINT_USE_FLAT_CONFIG` mode that may reduce the need\n  for the `modern-module-resolution` patch.\n\n- **custom-config-package-names**: enables [rig packages](https://heft.rushstack.io/pages/intro/rig_packages/)\n  to provide shareable configs for ESLint, by removing the requirement that `eslint-config` must appear in\n  the NPM package name.\n\nContributions welcome!  If you have more ideas for experimental ESLint enhancements that might benefit\nlarge scale monorepos, consider adding them to this patch.\n\n\n# eslint-bulk-suppressions feature\n\n<!-- ## is correct here, but ### looks better in NPM's rendering -->\n\n### What it does\n\nAs your monorepo evolves and grows, there's an ongoing need to expand and improve lint rules.  But whenever a\nnew rule is enabled, there may be hundreds or thousands of \"legacy violations\" in existing source files.\nHow to handle that? We could fix the old code, but that's often prohibitively expensive and may even cause\nregressions. We could disable the rule for those projects or files, but we want new code to follow the rule.\nAn effective solution is to inject thousands of `// eslint-ignore-next-line` lines, but these \"bulk suppressions\"\nhave an unintended side effect:  It normalizes the practice of suppressing lint rules.  If people get used to\nseeing `// eslint-ignore-next-line` everywhere, nobody will notice when humans suppress the rules for new code.\nThat would undermine the mission of establishing better code standards.\n\nThe `eslint-bulk-suppressions` feature introduces a way to store machine-generated suppressions in a separate\nfile **.eslint-bulk-suppressions.json** which can even be protected using `CODEOWNERS` policies, since that file\nwill generally only change when new lint rules are introduced, or in occasional circumstances when existing files\nare being moved or renamed.  In this way `// eslint-ignore-next-line` remains a directive written by humans\nand hopefully rarely needed.\n\n\n### Why it's a patch\n\nAs with `modern-module-resolution`, our hope is for this feature to eventually be incorporated as an official\nfeature of ESLint.  Starting out as an unofficial patch allows faster iteration and community feedback.\n\n\n### How to use it\n\n1. Add `@rushstack/eslint-patch` as a dependency of your project:\n\n   ```bash\n   cd your-project\n   npm install --save-dev @rushstack/eslint-patch\n   ```\n\n2. Globally install the [`@rushstack/eslint-bulk`](https://www.npmjs.com/package/@rushstack/eslint-bulk)\n   command line interface (CLI) package. For example:\n\n   ```bash\n   npm install --global @rushstack/eslint-bulk\n   ```\n\n   This installs the `eslint-bulk` shell command for managing the **.eslint-bulk-suppressions.json** files.\n   With it you can generate new suppressions as well as \"prune\" old suppressions that are no longer needed.\n\n3. Load the patch by adding the following `require()` statement as the first line of\n   your **.eslintrc.js** file.  For example:\n\n   **.eslintrc.js**\n   ```js\n   require(\"@rushstack/eslint-patch/eslint-bulk-suppressions\"); // ðŸ‘ˆ add this line\n\n   module.exports = {\n     rules: {\n       rule1: 'error',\n       rule2: 'warning'\n     },\n     parserOptions: { tsconfigRootDir: __dirname }\n   };\n   ```\n\nTypical workflow:\n\n1. Checkout your `main` branch, which is in a clean state where ESLint reports no violations.\n2. Update your configuration to enable the latest lint rules; ESLint now reports thousands of legacy violations.\n3. Run `eslint-bulk suppress --all ./src` to update **.eslint-bulk-suppressions.json.**\n4. ESLint now no longer reports violations, so commit the results to Git and merge your pull request.\n5. Over time, engineers may improve some of the suppressed code, in which case the associated suppressions are no longer needed.\n6. Run `eslint-bulk prune` periodically to find and remove unnecessary suppressions from **.eslint-bulk-suppressions.json**, ensuring that new violations will now get caught in those scopes.\n\n### \"eslint-bulk suppress\" command\n\n```bash\neslint-bulk suppress --rule NAME1 [--rule NAME2...] PATH1 [PATH2...]\neslint-bulk suppress --all PATH1 [PATH2...]\n```\n\nUse this command to automatically generate bulk suppressions for the specified lint rules and file paths.\nThe path argument is a [glob pattern](https://en.wikipedia.org/wiki/Glob_(programming)) with the same syntax\nas path arguments for the `eslint` command.\n\n\n### \"eslint-bulk prune\" command\n\nUse this command to automatically delete all unnecessary suppression entries in all\n**.eslint-bulk-suppressions.json** files under the current working directory.\n\n```bash\neslint-bulk prune\n```\n\n### Implementation notes\n\nThe `eslint-bulk` command is a thin wrapper whose behavior is actually provided by the patch itself.\nIn this way, if your monorepo contains projects using different versions of this package, the same globally\ninstalled `eslint-bulk` command can be used under any project folder, and it will always invoke the correct\nversion of the engine compatible with that project.  Because the patch is loaded by ESLint, the `eslint-bulk`\ncommand must be invoked in a project folder that contains an **.eslintrc.js** configuration with correctly\ninstalled **package.json** dependencies.\n\nHere's an example of the bulk suppressions file content:\n\n**.eslint-bulk-suppressions.json**\n```js\n{\n  \"suppressions\": [\n    {\n      \"rule\": \"no-var\",\n      \"file\": \"./src/your-file.ts\",\n      \"scopeId\": \".ExampleClass.exampleMethod\"\n    }\n  ]\n}\n```\nThe `rule` field is the ESLint rule name.  The `file` field is the source file path, relative to the **eslintrc.js** file.  The `scopeId` is a special string built from the names of containing structures.  (For implementation details, take a look at the [calculateScopeId()](https://github.com/microsoft/rushstack/blob/e95c51088341f01516ee5a7639d57c3f6dce8772/eslint/eslint-patch/src/eslint-bulk-suppressions/bulk-suppressions-patch.ts#L52) function.)  The `scopeId` identifies a region of code where the rule should be suppressed, while being reasonably stable across edits of the source file.\n\n# modern-module-resolution feature\n\n### What it does\n\nThis patch is a workaround for a longstanding [ESLint feature request](https://github.com/eslint/eslint/issues/3458)\nthat would allow a shareable ESLint config to bring along its own plugins, rather than imposing peer dependencies\non every consumer of the config.  In a monorepo scenario, this enables your lint setup to be consolidated in a\nsingle NPM package.  Doing so greatly reduces the copy+pasting and version management for all the other projects\nthat use your standard lint rule set, but don't want to be bothered with the details.\n\n> **NOTE:** ESLint 8.21.0 has now introduced a new `ESLINT_USE_FLAT_CONFIG` mode that may reduce the need\n> for this patch.\n\n\n### Why it's a patch\n\nWe initially proposed this feature in a pull request for the official ESLint back in 2019, however the\nmaintainers preferred to implement a more comprehensive overhaul of the ESLint config engine.  It ultimately\nshipped with the experimental new `ESLINT_USE_FLAT_CONFIG` mode (still opt-in as of ESLint 8).\nWhile waiting for that, Rush Stack's `modern-module-resolution` patch provided a reliable interim solution.\nWe will continue to maintain this patch as long as it is being widely used, but we encourage you to check out\n`ESLINT_USE_FLAT_CONFIG` and see if it meets your needs.\n\n\n### How to use it\n\n1. Add `@rushstack/eslint-patch` as a dependency of your project:\n\n   ```bash\n   cd your-project\n   npm install --save-dev @rushstack/eslint-patch\n   ```\n\n2. Add a `require()` call to the to top of the **.eslintrc.js** file for each project that depends\n   on your shareable ESLint config, for example:\n\n   **.eslintrc.js**\n   ```ts\n   require(\"@rushstack/eslint-patch/modern-module-resolution\"); // ðŸ‘ˆ add this line\n\n   // Add your \"extends\" boilerplate here, for example:\n   module.exports = {\n     extends: ['@your-company/eslint-config'],\n     parserOptions: { tsconfigRootDir: __dirname }\n   };\n   ```\n\nWith this change, the local project no longer needs any ESLint plugins in its **package.json** file.\nInstead, the hypothetical `@your-company/eslint-config` NPM package would declare the plugins as its\nown dependencies.\n\nThis patch works by modifying the ESLint engine so that its module resolver will load relative to the folder of\nthe referencing config file, rather than the project folder.  The patch is compatible with ESLint 6, 7, and 8.\nIt also works with any editor extensions that load ESLint as a library.\n\nFor an even leaner setup, `@your-company/eslint-config` can provide the patches as its own dependency.\nSee [@rushstack/eslint-config](https://github.com/microsoft/rushstack/blob/main/eslint/eslint-config/patch/modern-module-resolution.js) for a real world example.\n\n\n# custom-config-package-names feature\n\n### What it does\n\nLoad the `custom-config-package-names` patch to remove ESLint's\n[naming requirement](https://eslint.org/docs/latest/extend/shareable-configs)\nthat `eslint-config` must be part of the NPM package name for shareable configs.\n\nThis is useful because Rush Stack's [rig package](https://heft.rushstack.io/pages/intro/rig_packages/)\nspecification defines a way for many different tooling configurations and dependencies to be shared\nvia a single NPM package, for example\n[`@rushstack/heft-web-rig`](https://www.npmjs.com/package/@rushstack/heft-web-rig).\nRigs avoid a lot of copy+pasting of dependencies in a large scale monorepo.\nRig packages always include the `-rig` suffix in their name.  It doesn't make sense to enforce\nthat `eslint-config` should also appear in the name of a package that includes shareable configs\nfor many other tools besides ESLint.\n\n### How to use it\n\nContinuing the example above, to load this patch you would add a second line to your config file:\n\n**.eslintrc.js**\n```ts\nrequire(\"@rushstack/eslint-patch/modern-module-resolution\");\nrequire(\"@rushstack/eslint-patch/custom-config-package-names\"); // ðŸ‘ˆ add this line\n\n// Add your \"extends\" boilerplate here, for example:\nmodule.exports = {\n  extends: [\n    '@your-company/build-rig/profile/default/includes/eslint/node' // Notice the package name does not start with \"eslint-config-\"\n  ],\n  parserOptions: { tsconfigRootDir: __dirname }\n};\n```\n\n\n# Links\n\n- [CHANGELOG.md](https://github.com/microsoft/rushstack/blob/main/eslint/eslint-patch/CHANGELOG.md) - Find\n  out what's new in the latest version\n\n- [`@rushstack/eslint-bulk`](https://www.npmjs.com/package/@rushstack/eslint-bulk) CLI package\n\n`@rushstack/eslint-patch` is part of the [Rush Stack](https://rushstack.io/) family of projects.\n",
    "licenseText": "@rushstack/eslint-patch\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@rushstack/eslint-patch/-/eslint-patch-1.10.4.tgz#427d5549943a9c6fce808e39ea64dbe60d4047f1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@rushstack/eslint-patch/-/eslint-patch-1.10.4.tgz",
    "hash": "427d5549943a9c6fce808e39ea64dbe60d4047f1",
    "integrity": "sha512-WJgX9nzTqknM393q1QJDJmoW28kUfEnybeTfVNcNAPnIx210RXm2DiXiHzfNPJNIUUb1tJnz/l4QGtJ30PgWmA==",
    "registry": "npm",
    "packageName": "@rushstack/eslint-patch",
    "cacheIntegrity": "sha512-WJgX9nzTqknM393q1QJDJmoW28kUfEnybeTfVNcNAPnIx210RXm2DiXiHzfNPJNIUUb1tJnz/l4QGtJ30PgWmA== sha1-Qn1VSZQ6nG/OgI456mTb5g1AR/E="
  },
  "registry": "npm",
  "hash": "427d5549943a9c6fce808e39ea64dbe60d4047f1"
}