{
  "manifest": {
    "name": "pacote",
    "version": "20.0.0",
    "description": "JavaScript package downloader",
    "author": {
      "name": "GitHub Inc."
    },
    "bin": {
      "pacote": "bin/index.js"
    },
    "license": "ISC",
    "main": "lib/index.js",
    "scripts": {
      "test": "tap",
      "snap": "tap",
      "lint": "npm run eslint",
      "postlint": "template-oss-check",
      "lintfix": "npm run eslint -- --fix",
      "posttest": "npm run lint",
      "template-oss-apply": "template-oss-apply --force",
      "eslint": "eslint \"**/*.{js,cjs,ts,mjs,jsx,tsx}\""
    },
    "tap": {
      "timeout": 300,
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ]
    },
    "devDependencies": {
      "@npmcli/arborist": "^7.1.0",
      "@npmcli/eslint-config": "^5.0.0",
      "@npmcli/template-oss": "4.23.3",
      "hosted-git-info": "^8.0.0",
      "mutate-fs": "^2.1.1",
      "nock": "^13.2.4",
      "npm-registry-mock": "^1.3.2",
      "tap": "^16.0.1"
    },
    "files": [
      "bin/",
      "lib/"
    ],
    "keywords": [
      "packages",
      "npm",
      "git"
    ],
    "dependencies": {
      "@npmcli/git": "^6.0.0",
      "@npmcli/installed-package-contents": "^3.0.0",
      "@npmcli/package-json": "^6.0.0",
      "@npmcli/promise-spawn": "^8.0.0",
      "@npmcli/run-script": "^9.0.0",
      "cacache": "^19.0.0",
      "fs-minipass": "^3.0.0",
      "minipass": "^7.0.2",
      "npm-package-arg": "^12.0.0",
      "npm-packlist": "^9.0.0",
      "npm-pick-manifest": "^10.0.0",
      "npm-registry-fetch": "^18.0.0",
      "proc-log": "^5.0.0",
      "promise-retry": "^2.0.1",
      "sigstore": "^3.0.0",
      "ssri": "^12.0.0",
      "tar": "^6.1.11"
    },
    "engines": {
      "node": "^18.17.0 || >=20.5.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/npm/pacote.git"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "version": "4.23.3",
      "windowsCI": false,
      "publish": "true"
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-pacote-20.0.0-c974373d8e0859d00e8f9158574350f8c1b168e5-integrity/node_modules/pacote/package.json",
    "readmeFilename": "README.md",
    "readme": "# pacote\n\nFetches package manifests and tarballs from the npm registry.\n\n## USAGE\n\n```js\nconst pacote = require('pacote')\n\n// get a package manifest\npacote.manifest('foo@1.x').then(manifest => console.log('got it', manifest))\n\n// extract a package into a folder\npacote.extract('github:npm/cli', 'some/path', options)\n  .then(({from, resolved, integrity}) => {\n    console.log('extracted!', from, resolved, integrity)\n  })\n\npacote.tarball('https://server.com/package.tgz').then(data => {\n  console.log('got ' + data.length + ' bytes of tarball data')\n})\n```\n\n`pacote` works with any kind of package specifier that npm can install.  If\nyou can pass it to the npm CLI, you can pass it to pacote.  (In fact, that's\nexactly what the npm CLI does.)\n\nAnything that you can do with one kind of package, you can do with another.\n\nData that isn't relevant (like a packument for a tarball) will be\nsimulated.\n\n`prepare` scripts will be run when generating tarballs from `git` and\n`directory` locations, to simulate what _would_ be published to the\nregistry, so that you get a working package instead of just raw source\ncode that might need to be transpiled.\n\n## CLI\n\nThis module exports a command line interface that can do most of what is\ndescribed below.  Run `pacote -h` to learn more.\n\n```\nPacote - The JavaScript Package Handler, v10.1.1\n\nUsage:\n\n  pacote resolve <spec>\n    Resolve a specifier and output the fully resolved target\n    Returns integrity and from if '--long' flag is set.\n\n  pacote manifest <spec>\n    Fetch a manifest and print to stdout\n\n  pacote packument <spec>\n    Fetch a full packument and print to stdout\n\n  pacote tarball <spec> [<filename>]\n    Fetch a package tarball and save to <filename>\n    If <filename> is missing or '-', the tarball will be streamed to stdout.\n\n  pacote extract <spec> <folder>\n    Extract a package to the destination folder.\n\nConfiguration values all match the names of configs passed to npm, or\noptions passed to Pacote.  Additional flags for this executable:\n\n  --long     Print an object from 'resolve', including integrity and spec.\n  --json     Print result objects as JSON rather than node's default.\n             (This is the default if stdout is not a TTY.)\n  --help -h  Print this helpful text.\n\nFor example '--cache=/path/to/folder' will use that folder as the cache.\n```\n\n## API\n\nThe `spec` refers to any kind of package specifier that npm can install.\nIf you can pass it to the npm CLI, you can pass it to pacote.  (In fact,\nthat's exactly what the npm CLI does.)\n\nSee below for valid `opts` values.\n\n* `pacote.resolve(spec, opts)` Resolve a specifier like `foo@latest` or\n  `github:user/project` all the way to a tarball url, tarball file, or git\n  repo with commit hash.\n\n* `pacote.extract(spec, dest, opts)` Extract a package's tarball into a\n  destination folder.  Returns a promise that resolves to the\n  `{from,resolved,integrity}` of the extracted package.\n\n* `pacote.manifest(spec, opts)` Fetch (or simulate) a package's manifest\n  (basically, the `package.json` file, plus a bit of metadata).\n  See below for more on manifests and packuments.  Returns a Promise that\n  resolves to the manifest object.\n\n* `pacote.packument(spec, opts)` Fetch (or simulate) a package's packument\n  (basically, the top-level package document listing all the manifests that\n  the registry returns).  See below for more on manifests and packuments.\n  Returns a Promise that resolves to the packument object.\n\n* `pacote.tarball(spec, opts)`  Get a package tarball data as a buffer in\n  memory.  Returns a Promise that resolves to the tarball data Buffer, with\n  `from`, `resolved`, and `integrity` fields attached.\n\n* `pacote.tarball.file(spec, dest, opts)`  Save a package tarball data to\n  a file on disk.  Returns a Promise that resolves to\n  `{from,integrity,resolved}` of the fetched tarball.\n\n* `pacote.tarball.stream(spec, streamHandler, opts)`  Fetch a tarball and\n  make the stream available to the `streamHandler` function.\n\n    This is mostly an internal function, but it is exposed because it does\n    provide some functionality that may be difficult to achieve otherwise.\n\n    The `streamHandler` function MUST return a Promise that resolves when\n    the stream (and all associated work) is ended, or rejects if the stream\n    has an error.\n\n    The `streamHandler` function MAY be called multiple times, as Pacote\n    retries requests in some scenarios, such as cache corruption or\n    retriable network failures.\n\n### Options\n\nOptions are passed to\n[`npm-registry-fetch`](http://npm.im/npm-registry-fetch) and\n[`cacache`](http://npm.im/cacache), so in addition to these, anything for\nthose modules can be given to pacote as well.\n\nOptions object is cloned, and mutated along the way to add integrity,\nresolved, and other properties, as they are determined.\n\n* `cache` Where to store cache entries and temp files.  Passed to\n  [`cacache`](http://npm.im/cacache).  Defaults to the same cache directory\n  that npm will use by default, based on platform and environment.\n* `where` Base folder for resolving relative `file:` dependencies.\n* `resolved` Shortcut for looking up resolved values.  Should be specified\n  if known.\n* `integrity` Expected integrity of fetched package tarball.  If specified,\n  tarballs with mismatched integrity values will raise an `EINTEGRITY`\n  error.\n* `umask` Permission mode mask for extracted files and directories.\n  Defaults to `0o22`.  See \"Extracted File Modes\" below.\n* `fmode` Minimum permission mode for extracted files.  Defaults to\n  `0o666`.  See \"Extracted File Modes\" below.\n* `dmode` Minimum permission mode for extracted directories.  Defaults to\n  `0o777`.  See \"Extracted File Modes\" below.\n* `preferOnline` Prefer to revalidate cache entries, even when it would not\n  be strictly necessary.  Default `false`.\n* `before` When picking a manifest from a packument, only consider\n  packages published before the specified date.  Default `null`.\n* `defaultTag` The default `dist-tag` to use when choosing a manifest from a\n  packument.  Defaults to `latest`.\n* `registry` The npm registry to use by default.  Defaults to\n  `https://registry.npmjs.org/`.\n* `fullMetadata` Fetch the full metadata from the registry for packuments,\n  including information not strictly required for installation (author,\n  description, etc.)  Defaults to `true` when `before` is set, since the\n  version publish time is part of the extended packument metadata.\n* `fullReadJson` Use the slower `read-package-json` package insted of\n  `read-package-json-fast` in order to include extra fields like \"readme\" in\n  the manifest. Defaults to `false`.\n* `packumentCache` For registry packuments only, you may provide a `Map`\n  object which will be used to cache packument requests between pacote\n  calls.  This allows you to easily avoid hitting the registry multiple\n  times (even just to validate the cache) for a given packument, since it\n  is unlikely to change in the span of a single command.\n* `verifySignatures` A boolean that will make pacote verify the\n    integrity signature of a manifest, if present.  There must be a\n    configured `_keys` entry in the config that is scoped to the\n    registry the manifest is being fetched from.\n* `verifyAttestations` A boolean that will make pacote verify Sigstore\n    attestations, if present. There must be a configured `_keys` entry in the\n    config that is scoped to the registry the manifest is being fetched from.\n* `tufCache` Where to store metadata/target files when retrieving the package\n  attestation key material via TUF. Defaults to the same cache directory that\n  npm will use by default, based on platform and environment.\n\n### Advanced API\n\nEach different type of fetcher is exposed for more advanced usage such as\nusing helper methods from this classes:\n\n* `DirFetcher`\n* `FileFetcher`\n* `GitFetcher`\n* `RegistryFetcher`\n* `RemoteFetcher`\n\n## Extracted File Modes\n\nFiles are extracted with a mode matching the following formula:\n\n```\n( (tarball entry mode value) | (minimum mode option) ) ~ (umask)\n```\n\nThis is in order to prevent unreadable files or unlistable directories from\ncluttering a project's `node_modules` folder, even if the package tarball\nspecifies that the file should be inaccessible.\n\nIt also prevents files from being group- or world-writable without explicit\nopt-in by the user, because all file and directory modes are masked against\nthe `umask` value.\n\nSo, a file which is `0o771` in the tarball, using the default `fmode` of\n`0o666` and `umask` of `0o22`, will result in a file mode of `0o755`:\n\n```\n(0o771 | 0o666) => 0o777\n(0o777 ~ 0o22) => 0o755\n```\n\nIn almost every case, the defaults are appropriate.  To respect exactly\nwhat is in the package tarball (even if this makes an unusable system), set\nboth `dmode` and `fmode` options to `0`.  Otherwise, the `umask` config\nshould be used in most cases where file mode modifications are required,\nand this functions more or less the same as the `umask` value in most Unix\nsystems.\n\n## Extracted File Ownership\n\nWhen running as `root` on Unix systems, all extracted files and folders\nwill have their owning `uid` and `gid` values set to match the ownership\nof the containing folder.\n\nThis prevents `root`-owned files showing up in a project's `node_modules`\nfolder when a user runs `sudo npm install`.\n\n## Manifests\n\nA `manifest` is similar to a `package.json` file.  However, it has a few\npieces of extra metadata, and sometimes lacks metadata that is inessential\nto package installation.\n\nIn addition to the common `package.json` fields, manifests include:\n\n* `manifest._resolved` The tarball url or file path where the package\n  artifact can be found.\n* `manifest._from` A normalized form of the spec passed in as an argument.\n* `manifest._integrity` The integrity value for the package artifact.\n* `manifest._id` The canonical spec of this package version: name@version.\n* `manifest.dist` Registry manifests (those included in a packument) have a\n  `dist` object.  Only `tarball` is required, though at least one of\n  `shasum` or `integrity` is almost always present.\n\n    * `tarball` The url to the associated package artifact.  (Copied by\n      Pacote to `manifest._resolved`.)\n    * `integrity` The integrity SRI string for the artifact.  This may not\n      be present for older packages on the npm registry.  (Copied by Pacote\n      to `manifest._integrity`.)\n    * `shasum` Legacy integrity value.  Hexadecimal-encoded sha1 hash.\n      (Converted to an SRI string and copied by Pacote to\n      `manifest._integrity` when `dist.integrity` is not present.)\n    * `fileCount` Number of files in the tarball.\n    * `unpackedSize` Size on disk of the package when unpacked.\n    * `signatures` Signatures of the shasum.  Includes the keyid that\n        correlates to a [`key from the npm\n        registry`](https://registry.npmjs.org/-/npm/v1/keys)\n\n## Packuments\n\nA packument is the top-level package document that lists the set of\nmanifests for available versions for a package.\n\nWhen a packument is fetched with `accept:\napplication/vnd.npm.install-v1+json` in the HTTP headers, only the most\nminimum necessary metadata is returned.  Additional metadata is returned\nwhen fetched with only `accept: application/json`.\n\nFor Pacote's purposes, the following fields are relevant:\n\n* `versions` An object where each key is a version, and each value is the\n  manifest for that version.\n* `dist-tags` An object mapping dist-tags to version numbers.  This is how\n  `foo@latest` gets turned into `foo@1.2.3`.\n* `time` In the full packument, an object mapping version numbers to\n  publication times, for the `opts.before` functionality.\n\nPacote adds the following field, regardless of the accept header:\n\n* `_contentLength` The size of the packument.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter, Kat Marchán, npm, Inc., and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pacote/-/pacote-20.0.0.tgz#c974373d8e0859d00e8f9158574350f8c1b168e5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pacote/-/pacote-20.0.0.tgz",
    "hash": "c974373d8e0859d00e8f9158574350f8c1b168e5",
    "integrity": "sha512-pRjC5UFwZCgx9kUFDVM9YEahv4guZ1nSLqwmWiLUnDbGsjs+U5w7z6Uc8HNR1a6x8qnu5y9xtGE6D1uAuYz+0A==",
    "registry": "npm",
    "packageName": "pacote",
    "cacheIntegrity": "sha512-pRjC5UFwZCgx9kUFDVM9YEahv4guZ1nSLqwmWiLUnDbGsjs+U5w7z6Uc8HNR1a6x8qnu5y9xtGE6D1uAuYz+0A== sha1-yXQ3PY4IWdAOj5FYV0NQ+MGxaOU="
  },
  "registry": "npm",
  "hash": "c974373d8e0859d00e8f9158574350f8c1b168e5"
}