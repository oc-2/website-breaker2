{
  "manifest": {
    "name": "htmlparser2",
    "description": "Fast & forgiving HTML/XML parser",
    "version": "9.1.0",
    "author": {
      "name": "Felix Boehm",
      "email": "me@feedic.com"
    },
    "funding": [
      "https://github.com/fb55/htmlparser2?sponsor=1",
      {
        "type": "github",
        "url": "https://github.com/sponsors/fb55"
      }
    ],
    "license": "MIT",
    "sideEffects": false,
    "keywords": [
      "html",
      "parser",
      "streams",
      "xml",
      "dom",
      "rss",
      "feed",
      "atom"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/fb55/htmlparser2.git"
    },
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "module": "lib/esm/index.js",
    "exports": {
      ".": {
        "require": "./lib/index.js",
        "import": "./lib/esm/index.js"
      },
      "./lib/WritableStream": {
        "require": "./lib/WritableStream.js",
        "import": "./lib/esm/WritableStream.js"
      }
    },
    "files": [
      "lib/**/*"
    ],
    "scripts": {
      "test": "npm run test:jest && npm run lint",
      "test:jest": "jest",
      "lint": "npm run lint:es && npm run lint:prettier",
      "lint:es": "eslint src",
      "lint:prettier": "npm run format:prettier:raw -- --check",
      "format": "npm run format:es && npm run format:prettier",
      "format:es": "npm run lint:es -- --fix",
      "format:prettier": "npm run format:prettier:raw -- --write",
      "format:prettier:raw": "prettier '**/*.{ts,md,json,yml}'",
      "build": "npm run build:cjs && npm run build:esm",
      "build:cjs": "tsc --sourceRoot https://raw.githubusercontent.com/fb55/htmlparser2/$(git rev-parse HEAD)/src/",
      "build:esm": "npm run build:cjs -- --module esnext --target es2019 --outDir lib/esm && echo '{\"type\":\"module\"}' > lib/esm/package.json",
      "prepare": "npm run build"
    },
    "dependencies": {
      "domelementtype": "^2.3.0",
      "domhandler": "^5.0.3",
      "domutils": "^3.1.0",
      "entities": "^4.5.0"
    },
    "devDependencies": {
      "@types/jest": "^29.5.11",
      "@types/node": "^20.10.6",
      "@typescript-eslint/eslint-plugin": "^6.17.0",
      "@typescript-eslint/parser": "^6.17.0",
      "eslint": "^8.56.0",
      "eslint-config-prettier": "^9.1.0",
      "eslint-plugin-n": "^16.6.1",
      "eslint-plugin-unicorn": "^50.0.1",
      "jest": "^29.7.0",
      "prettier": "^3.1.1",
      "ts-jest": "^29.1.1",
      "typescript": "^5.3.3"
    },
    "jest": {
      "preset": "ts-jest",
      "testEnvironment": "node",
      "coverageProvider": "v8",
      "moduleNameMapper": {
        "^(.*)\\.js$": [
          "$1",
          "$1.js"
        ]
      }
    },
    "prettier": {
      "tabWidth": 4
    },
    "_registry": "npm",
    "_loc": "/home/runner/website-breaker2/.cache/yarn/v6/npm-htmlparser2-9.1.0-cdb498d8a75a51f739b61d3f718136c369bc8c23-integrity/node_modules/htmlparser2/package.json",
    "readmeFilename": "README.md",
    "readme": "# htmlparser2\n\n[![NPM version](https://img.shields.io/npm/v/htmlparser2.svg)](https://npmjs.org/package/htmlparser2)\n[![Downloads](https://img.shields.io/npm/dm/htmlparser2.svg)](https://npmjs.org/package/htmlparser2)\n[![Node.js CI](https://github.com/fb55/htmlparser2/actions/workflows/nodejs-test.yml/badge.svg)](https://github.com/fb55/htmlparser2/actions/workflows/nodejs-test.yml)\n[![Coverage](https://img.shields.io/coveralls/fb55/htmlparser2.svg)](https://coveralls.io/r/fb55/htmlparser2)\n\nThe fast & forgiving HTML/XML parser.\n\n_htmlparser2 is [the fastest HTML parser](#performance), and takes some shortcuts to get there. If you need strict HTML spec compliance, have a look at [parse5](https://github.com/inikulin/parse5)._\n\n## Installation\n\n    npm install htmlparser2\n\nA live demo of `htmlparser2` is available [on AST Explorer](https://astexplorer.net/#/2AmVrGuGVJ).\n\n## Ecosystem\n\n| Name                                                          | Description                                             |\n| ------------------------------------------------------------- | ------------------------------------------------------- |\n| [htmlparser2](https://github.com/fb55/htmlparser2)            | Fast & forgiving HTML/XML parser                        |\n| [domhandler](https://github.com/fb55/domhandler)              | Handler for htmlparser2 that turns documents into a DOM |\n| [domutils](https://github.com/fb55/domutils)                  | Utilities for working with domhandler's DOM             |\n| [css-select](https://github.com/fb55/css-select)              | CSS selector engine, compatible with domhandler's DOM   |\n| [cheerio](https://github.com/cheeriojs/cheerio)               | The jQuery API for domhandler's DOM                     |\n| [dom-serializer](https://github.com/cheeriojs/dom-serializer) | Serializer for domhandler's DOM                         |\n\n## Usage\n\n`htmlparser2` itself provides a callback interface that allows consumption of documents with minimal allocations.\nFor a more ergonomic experience, read [Getting a DOM](#getting-a-dom) below.\n\n```js\nimport * as htmlparser2 from \"htmlparser2\";\n\nconst parser = new htmlparser2.Parser({\n    onopentag(name, attributes) {\n        /*\n         * This fires when a new tag is opened.\n         *\n         * If you don't need an aggregated `attributes` object,\n         * have a look at the `onopentagname` and `onattribute` events.\n         */\n        if (name === \"script\" && attributes.type === \"text/javascript\") {\n            console.log(\"JS! Hooray!\");\n        }\n    },\n    ontext(text) {\n        /*\n         * Fires whenever a section of text was processed.\n         *\n         * Note that this can fire at any point within text and you might\n         * have to stitch together multiple pieces.\n         */\n        console.log(\"-->\", text);\n    },\n    onclosetag(tagname) {\n        /*\n         * Fires when a tag is closed.\n         *\n         * You can rely on this event only firing when you have received an\n         * equivalent opening tag before. Closing tags without corresponding\n         * opening tags will be ignored.\n         */\n        if (tagname === \"script\") {\n            console.log(\"That's it?!\");\n        }\n    },\n});\nparser.write(\n    \"Xyz <script type='text/javascript'>const foo = '<<bar>>';</script>\",\n);\nparser.end();\n```\n\nOutput (with multiple text events combined):\n\n```\n--> Xyz\nJS! Hooray!\n--> const foo = '<<bar>>';\nThat's it?!\n```\n\nThis example only shows three of the possible events.\nRead more about the parser, its events and options in the [wiki](https://github.com/fb55/htmlparser2/wiki/Parser-options).\n\n### Usage with streams\n\nWhile the `Parser` interface closely resembles Node.js streams, it's not a 100% match.\nUse the `WritableStream` interface to process a streaming input:\n\n```js\nimport { WritableStream } from \"htmlparser2/lib/WritableStream\";\n\nconst parserStream = new WritableStream({\n    ontext(text) {\n        console.log(\"Streaming:\", text);\n    },\n});\n\nconst htmlStream = fs.createReadStream(\"./my-file.html\");\nhtmlStream.pipe(parserStream).on(\"finish\", () => console.log(\"done\"));\n```\n\n## Getting a DOM\n\nThe `DomHandler` produces a DOM (document object model) that can be manipulated using the [`DomUtils`](https://github.com/fb55/DomUtils) helper.\n\n```js\nimport * as htmlparser2 from \"htmlparser2\";\n\nconst dom = htmlparser2.parseDocument(htmlString);\n```\n\nThe `DomHandler`, while still bundled with this module, was moved to its [own module](https://github.com/fb55/domhandler).\nHave a look at that for further information.\n\n## Parsing Feeds\n\n`htmlparser2` makes it easy to parse RSS, RDF and Atom feeds, by providing a `parseFeed` method:\n\n```javascript\nconst feed = htmlparser2.parseFeed(content, options);\n```\n\n## Performance\n\nAfter having some artificial benchmarks for some time, **@AndreasMadsen** published his [`htmlparser-benchmark`](https://github.com/AndreasMadsen/htmlparser-benchmark), which benchmarks HTML parses based on real-world websites.\n\nAt the time of writing, the latest versions of all supported parsers show the following performance characteristics on GitHub Actions (sourced from [here](https://github.com/AndreasMadsen/htmlparser-benchmark/blob/e78cd8fc6c2adac08deedd4f274c33537451186b/stats.txt)):\n\n```\nhtmlparser2        : 2.17215 ms/file ± 3.81587\nnode-html-parser   : 2.35983 ms/file ± 1.54487\nhtml5parser        : 2.43468 ms/file ± 2.81501\nneutron-html5parser: 2.61356 ms/file ± 1.70324\nhtmlparser2-dom    : 3.09034 ms/file ± 4.77033\nhtml-dom-parser    : 3.56804 ms/file ± 5.15621\nlibxmljs           : 4.07490 ms/file ± 2.99869\nhtmljs-parser      : 6.15812 ms/file ± 7.52497\nparse5             : 9.70406 ms/file ± 6.74872\nhtmlparser         : 15.0596 ms/file ± 89.0826\nhtml-parser        : 28.6282 ms/file ± 22.6652\nsaxes              : 45.7921 ms/file ± 128.691\nhtml5              : 120.844 ms/file ± 153.944\n```\n\n## How does this module differ from [node-htmlparser](https://github.com/tautologistics/node-htmlparser)?\n\nIn 2011, this module started as a fork of the `htmlparser` module.\n`htmlparser2` was rewritten multiple times and, while it maintains an API that's mostly compatible with `htmlparser`, the projects don't share any code anymore.\n\nThe parser now provides a callback interface inspired by [sax.js](https://github.com/isaacs/sax-js) (originally targeted at [readabilitySAX](https://github.com/fb55/readabilitysax)).\nAs a result, old handlers won't work anymore.\n\nThe `DefaultHandler` was renamed to clarify its purpose (to `DomHandler`). The old name is still available when requiring `htmlparser2` and your code should work as expected.\n\nThe `RssHandler` was replaced with a `getFeed` function that takes a `DomHandler` DOM and returns a feed object. There is a `parseFeed` helper function that can be used to parse a feed from a string.\n\n## Security contact information\n\nTo report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n\n## `htmlparser2` for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `htmlparser2` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-htmlparser2?utm_source=npm-htmlparser2&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n",
    "licenseText": "Copyright 2010, 2011, Chris Winberry <chris@winberry.net>. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-9.1.0.tgz#cdb498d8a75a51f739b61d3f718136c369bc8c23",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-9.1.0.tgz",
    "hash": "cdb498d8a75a51f739b61d3f718136c369bc8c23",
    "integrity": "sha512-5zfg6mHUoaer/97TxnGpxmbR7zJtPwIYFMZ/H5ucTlPZhKvtum05yiPK3Mgai3a0DyVxv7qYqoweaEd2nrYQzQ==",
    "registry": "npm",
    "packageName": "htmlparser2",
    "cacheIntegrity": "sha512-5zfg6mHUoaer/97TxnGpxmbR7zJtPwIYFMZ/H5ucTlPZhKvtum05yiPK3Mgai3a0DyVxv7qYqoweaEd2nrYQzQ== sha1-zbSY2KdaUfc5th0/cYE2w2m8jCM="
  },
  "registry": "npm",
  "hash": "cdb498d8a75a51f739b61d3f718136c369bc8c23"
}